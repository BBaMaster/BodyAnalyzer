ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"PWM_SPO2.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.PWM_SPO2_Enable,"ax",%progbits
  20              		.align	2
  21              		.global	PWM_SPO2_Enable
  22              		.thumb
  23              		.thumb_func
  24              		.type	PWM_SPO2_Enable, %function
  25              	PWM_SPO2_Enable:
  26              	.LFB2:
  27              		.file 1 "Generated_Source\\PSoC5\\PWM_SPO2.c"
   1:Generated_Source\PSoC5/PWM_SPO2.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/PWM_SPO2.c **** * File Name: PWM_SPO2.c
   3:Generated_Source\PSoC5/PWM_SPO2.c **** * Version 3.30
   4:Generated_Source\PSoC5/PWM_SPO2.c **** *
   5:Generated_Source\PSoC5/PWM_SPO2.c **** * Description:
   6:Generated_Source\PSoC5/PWM_SPO2.c **** *  The PWM User Module consist of an 8 or 16-bit counter with two 8 or 16-bit
   7:Generated_Source\PSoC5/PWM_SPO2.c **** *  comparitors. Each instance of this user module is capable of generating
   8:Generated_Source\PSoC5/PWM_SPO2.c **** *  two PWM outputs with the same period. The pulse width is selectable between
   9:Generated_Source\PSoC5/PWM_SPO2.c **** *  1 and 255/65535. The period is selectable between 2 and 255/65536 clocks.
  10:Generated_Source\PSoC5/PWM_SPO2.c **** *  The compare value output may be configured to be active when the present
  11:Generated_Source\PSoC5/PWM_SPO2.c **** *  counter is less than or less than/equal to the compare value.
  12:Generated_Source\PSoC5/PWM_SPO2.c **** *  A terminal count output is also provided. It generates a pulse one clock
  13:Generated_Source\PSoC5/PWM_SPO2.c **** *  width wide when the counter is equal to zero.
  14:Generated_Source\PSoC5/PWM_SPO2.c **** *
  15:Generated_Source\PSoC5/PWM_SPO2.c **** * Note:
  16:Generated_Source\PSoC5/PWM_SPO2.c **** *
  17:Generated_Source\PSoC5/PWM_SPO2.c **** *******************************************************************************
  18:Generated_Source\PSoC5/PWM_SPO2.c **** * Copyright 2008-2014, Cypress Semiconductor Corporation.  All rights reserved.
  19:Generated_Source\PSoC5/PWM_SPO2.c **** * You may use this file only in accordance with the license, terms, conditions,
  20:Generated_Source\PSoC5/PWM_SPO2.c **** * disclaimers, and limitations in the end user license agreement accompanying
  21:Generated_Source\PSoC5/PWM_SPO2.c **** * the software package with which this file was provided.
  22:Generated_Source\PSoC5/PWM_SPO2.c **** ********************************************************************************/
  23:Generated_Source\PSoC5/PWM_SPO2.c **** 
  24:Generated_Source\PSoC5/PWM_SPO2.c **** #include "PWM_SPO2.h"
  25:Generated_Source\PSoC5/PWM_SPO2.c **** 
  26:Generated_Source\PSoC5/PWM_SPO2.c **** /* Error message for removed <resource> through optimization */
  27:Generated_Source\PSoC5/PWM_SPO2.c **** #ifdef PWM_SPO2_PWMUDB_genblk1_ctrlreg__REMOVED
  28:Generated_Source\PSoC5/PWM_SPO2.c ****     #error PWM_v3_30 detected with a constant 0 for the enable or \
  29:Generated_Source\PSoC5/PWM_SPO2.c ****          constant 1 for reset. This will prevent the component from operating.
  30:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* PWM_SPO2_PWMUDB_genblk1_ctrlreg__REMOVED */
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 2


  31:Generated_Source\PSoC5/PWM_SPO2.c **** 
  32:Generated_Source\PSoC5/PWM_SPO2.c **** uint8 PWM_SPO2_initVar = 0u;
  33:Generated_Source\PSoC5/PWM_SPO2.c **** 
  34:Generated_Source\PSoC5/PWM_SPO2.c **** 
  35:Generated_Source\PSoC5/PWM_SPO2.c **** /*******************************************************************************
  36:Generated_Source\PSoC5/PWM_SPO2.c **** * Function Name: PWM_SPO2_Start
  37:Generated_Source\PSoC5/PWM_SPO2.c **** ********************************************************************************
  38:Generated_Source\PSoC5/PWM_SPO2.c **** *
  39:Generated_Source\PSoC5/PWM_SPO2.c **** * Summary:
  40:Generated_Source\PSoC5/PWM_SPO2.c **** *  The start function initializes the pwm with the default values, the
  41:Generated_Source\PSoC5/PWM_SPO2.c **** *  enables the counter to begin counting.  It does not enable interrupts,
  42:Generated_Source\PSoC5/PWM_SPO2.c **** *  the EnableInt command should be called if interrupt generation is required.
  43:Generated_Source\PSoC5/PWM_SPO2.c **** *
  44:Generated_Source\PSoC5/PWM_SPO2.c **** * Parameters:
  45:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
  46:Generated_Source\PSoC5/PWM_SPO2.c **** *
  47:Generated_Source\PSoC5/PWM_SPO2.c **** * Return:
  48:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
  49:Generated_Source\PSoC5/PWM_SPO2.c **** *
  50:Generated_Source\PSoC5/PWM_SPO2.c **** * Global variables:
  51:Generated_Source\PSoC5/PWM_SPO2.c **** *  PWM_SPO2_initVar: Is modified when this function is called for the
  52:Generated_Source\PSoC5/PWM_SPO2.c **** *   first time. Is used to ensure that initialization happens only once.
  53:Generated_Source\PSoC5/PWM_SPO2.c **** *
  54:Generated_Source\PSoC5/PWM_SPO2.c **** *******************************************************************************/
  55:Generated_Source\PSoC5/PWM_SPO2.c **** void PWM_SPO2_Start(void) 
  56:Generated_Source\PSoC5/PWM_SPO2.c **** {
  57:Generated_Source\PSoC5/PWM_SPO2.c ****     /* If not Initialized then initialize all required hardware and software */
  58:Generated_Source\PSoC5/PWM_SPO2.c ****     if(PWM_SPO2_initVar == 0u)
  59:Generated_Source\PSoC5/PWM_SPO2.c ****     {
  60:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_Init();
  61:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_initVar = 1u;
  62:Generated_Source\PSoC5/PWM_SPO2.c ****     }
  63:Generated_Source\PSoC5/PWM_SPO2.c ****     PWM_SPO2_Enable();
  64:Generated_Source\PSoC5/PWM_SPO2.c ****     PWM_SPO2_WriteCompare(0);
  65:Generated_Source\PSoC5/PWM_SPO2.c **** }
  66:Generated_Source\PSoC5/PWM_SPO2.c **** 
  67:Generated_Source\PSoC5/PWM_SPO2.c **** 
  68:Generated_Source\PSoC5/PWM_SPO2.c **** /*******************************************************************************
  69:Generated_Source\PSoC5/PWM_SPO2.c **** * Function Name: PWM_SPO2_Init
  70:Generated_Source\PSoC5/PWM_SPO2.c **** ********************************************************************************
  71:Generated_Source\PSoC5/PWM_SPO2.c **** *
  72:Generated_Source\PSoC5/PWM_SPO2.c **** * Summary:
  73:Generated_Source\PSoC5/PWM_SPO2.c **** *  Initialize component's parameters to the parameters set by user in the
  74:Generated_Source\PSoC5/PWM_SPO2.c **** *  customizer of the component placed onto schematic. Usually called in
  75:Generated_Source\PSoC5/PWM_SPO2.c **** *  PWM_SPO2_Start().
  76:Generated_Source\PSoC5/PWM_SPO2.c **** *
  77:Generated_Source\PSoC5/PWM_SPO2.c **** * Parameters:
  78:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
  79:Generated_Source\PSoC5/PWM_SPO2.c **** *
  80:Generated_Source\PSoC5/PWM_SPO2.c **** * Return:
  81:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
  82:Generated_Source\PSoC5/PWM_SPO2.c **** *
  83:Generated_Source\PSoC5/PWM_SPO2.c **** *******************************************************************************/
  84:Generated_Source\PSoC5/PWM_SPO2.c **** void PWM_SPO2_Init(void) 
  85:Generated_Source\PSoC5/PWM_SPO2.c **** {
  86:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UsingFixedFunction || PWM_SPO2_UseControl)
  87:Generated_Source\PSoC5/PWM_SPO2.c ****         uint8 ctrl;
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 3


  88:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UsingFixedFunction || PWM_SPO2_UseControl) */
  89:Generated_Source\PSoC5/PWM_SPO2.c **** 
  90:Generated_Source\PSoC5/PWM_SPO2.c ****     #if(!PWM_SPO2_UsingFixedFunction)
  91:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(PWM_SPO2_UseStatus)
  92:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Interrupt State Backup for Critical Region*/
  93:Generated_Source\PSoC5/PWM_SPO2.c ****             uint8 PWM_SPO2_interruptState;
  94:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UseStatus) */
  95:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (!PWM_SPO2_UsingFixedFunction) */
  96:Generated_Source\PSoC5/PWM_SPO2.c **** 
  97:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UsingFixedFunction)
  98:Generated_Source\PSoC5/PWM_SPO2.c ****         /* You are allowed to write the compare value (FF only) */
  99:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_CONTROL |= PWM_SPO2_CFG0_MODE;
 100:Generated_Source\PSoC5/PWM_SPO2.c ****         #if (PWM_SPO2_DeadBand2_4)
 101:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_CONTROL |= PWM_SPO2_CFG0_DB;
 102:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_DeadBand2_4) */
 103:Generated_Source\PSoC5/PWM_SPO2.c **** 
 104:Generated_Source\PSoC5/PWM_SPO2.c ****         ctrl = PWM_SPO2_CONTROL3 & ((uint8 )(~PWM_SPO2_CTRL_CMPMODE1_MASK));
 105:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_CONTROL3 = ctrl | PWM_SPO2_DEFAULT_COMPARE1_MODE;
 106:Generated_Source\PSoC5/PWM_SPO2.c **** 
 107:Generated_Source\PSoC5/PWM_SPO2.c ****          /* Clear and Set SYNCTC and SYNCCMP bits of RT1 register */
 108:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_RT1 &= ((uint8)(~PWM_SPO2_RT1_MASK));
 109:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_RT1 |= PWM_SPO2_SYNC;
 110:Generated_Source\PSoC5/PWM_SPO2.c **** 
 111:Generated_Source\PSoC5/PWM_SPO2.c ****         /*Enable DSI Sync all all inputs of the PWM*/
 112:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_RT1 &= ((uint8)(~PWM_SPO2_SYNCDSI_MASK));
 113:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_RT1 |= PWM_SPO2_SYNCDSI_EN;
 114:Generated_Source\PSoC5/PWM_SPO2.c **** 
 115:Generated_Source\PSoC5/PWM_SPO2.c ****     #elif (PWM_SPO2_UseControl)
 116:Generated_Source\PSoC5/PWM_SPO2.c ****         /* Set the default compare mode defined in the parameter */
 117:Generated_Source\PSoC5/PWM_SPO2.c ****         ctrl = PWM_SPO2_CONTROL & ((uint8)(~PWM_SPO2_CTRL_CMPMODE2_MASK)) &
 118:Generated_Source\PSoC5/PWM_SPO2.c ****                 ((uint8)(~PWM_SPO2_CTRL_CMPMODE1_MASK));
 119:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_CONTROL = ctrl | PWM_SPO2_DEFAULT_COMPARE2_MODE |
 120:Generated_Source\PSoC5/PWM_SPO2.c ****                                    PWM_SPO2_DEFAULT_COMPARE1_MODE;
 121:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UsingFixedFunction) */
 122:Generated_Source\PSoC5/PWM_SPO2.c **** 
 123:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (!PWM_SPO2_UsingFixedFunction)
 124:Generated_Source\PSoC5/PWM_SPO2.c ****         #if (PWM_SPO2_Resolution == 8)
 125:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Set FIFO 0 to 1 byte register for period*/
 126:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_AUX_CONTROLDP0 |= (PWM_SPO2_AUX_CTRL_FIFO0_CLR);
 127:Generated_Source\PSoC5/PWM_SPO2.c ****         #else /* (PWM_SPO2_Resolution == 16)*/
 128:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Set FIFO 0 to 1 byte register for period */
 129:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_AUX_CONTROLDP0 |= (PWM_SPO2_AUX_CTRL_FIFO0_CLR);
 130:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_AUX_CONTROLDP1 |= (PWM_SPO2_AUX_CTRL_FIFO0_CLR);
 131:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_Resolution == 8) */
 132:Generated_Source\PSoC5/PWM_SPO2.c **** 
 133:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_WriteCounter(PWM_SPO2_INIT_PERIOD_VALUE);
 134:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (!PWM_SPO2_UsingFixedFunction) */
 135:Generated_Source\PSoC5/PWM_SPO2.c **** 
 136:Generated_Source\PSoC5/PWM_SPO2.c ****     PWM_SPO2_WritePeriod(PWM_SPO2_INIT_PERIOD_VALUE);
 137:Generated_Source\PSoC5/PWM_SPO2.c **** 
 138:Generated_Source\PSoC5/PWM_SPO2.c ****         #if (PWM_SPO2_UseOneCompareMode)
 139:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_WriteCompare(PWM_SPO2_INIT_COMPARE_VALUE1);
 140:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 141:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_WriteCompare1(PWM_SPO2_INIT_COMPARE_VALUE1);
 142:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_WriteCompare2(PWM_SPO2_INIT_COMPARE_VALUE2);
 143:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UseOneCompareMode) */
 144:Generated_Source\PSoC5/PWM_SPO2.c **** 
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 4


 145:Generated_Source\PSoC5/PWM_SPO2.c ****         #if (PWM_SPO2_KillModeMinTime)
 146:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_WriteKillTime(PWM_SPO2_MinimumKillTime);
 147:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_KillModeMinTime) */
 148:Generated_Source\PSoC5/PWM_SPO2.c **** 
 149:Generated_Source\PSoC5/PWM_SPO2.c ****         #if (PWM_SPO2_DeadBandUsed)
 150:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_WriteDeadTime(PWM_SPO2_INIT_DEAD_TIME);
 151:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_DeadBandUsed) */
 152:Generated_Source\PSoC5/PWM_SPO2.c **** 
 153:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UseStatus || PWM_SPO2_UsingFixedFunction)
 154:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_SetInterruptMode(PWM_SPO2_INIT_INTERRUPTS_MODE);
 155:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UseStatus || PWM_SPO2_UsingFixedFunction) */
 156:Generated_Source\PSoC5/PWM_SPO2.c **** 
 157:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UsingFixedFunction)
 158:Generated_Source\PSoC5/PWM_SPO2.c ****         /* Globally Enable the Fixed Function Block chosen */
 159:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_GLOBAL_ENABLE |= PWM_SPO2_BLOCK_EN_MASK;
 160:Generated_Source\PSoC5/PWM_SPO2.c ****         /* Set the Interrupt source to come from the status register */
 161:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_CONTROL2 |= PWM_SPO2_CTRL2_IRQ_SEL;
 162:Generated_Source\PSoC5/PWM_SPO2.c ****     #else
 163:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(PWM_SPO2_UseStatus)
 164:Generated_Source\PSoC5/PWM_SPO2.c **** 
 165:Generated_Source\PSoC5/PWM_SPO2.c ****             /* CyEnterCriticalRegion and CyExitCriticalRegion are used to mark following region cri
 166:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Enter Critical Region*/
 167:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_interruptState = CyEnterCriticalSection();
 168:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Use the interrupt output of the status register for IRQ output */
 169:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_STATUS_AUX_CTRL |= PWM_SPO2_STATUS_ACTL_INT_EN_MASK;
 170:Generated_Source\PSoC5/PWM_SPO2.c **** 
 171:Generated_Source\PSoC5/PWM_SPO2.c ****              /* Exit Critical Region*/
 172:Generated_Source\PSoC5/PWM_SPO2.c ****             CyExitCriticalSection(PWM_SPO2_interruptState);
 173:Generated_Source\PSoC5/PWM_SPO2.c **** 
 174:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Clear the FIFO to enable the PWM_SPO2_STATUS_FIFOFULL
 175:Generated_Source\PSoC5/PWM_SPO2.c ****                    bit to be set on FIFO full. */
 176:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_ClearFIFO();
 177:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UseStatus) */
 178:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UsingFixedFunction) */
 179:Generated_Source\PSoC5/PWM_SPO2.c **** }
 180:Generated_Source\PSoC5/PWM_SPO2.c **** 
 181:Generated_Source\PSoC5/PWM_SPO2.c **** 
 182:Generated_Source\PSoC5/PWM_SPO2.c **** /*******************************************************************************
 183:Generated_Source\PSoC5/PWM_SPO2.c **** * Function Name: PWM_SPO2_Enable
 184:Generated_Source\PSoC5/PWM_SPO2.c **** ********************************************************************************
 185:Generated_Source\PSoC5/PWM_SPO2.c **** *
 186:Generated_Source\PSoC5/PWM_SPO2.c **** * Summary:
 187:Generated_Source\PSoC5/PWM_SPO2.c **** *  Enables the PWM block operation
 188:Generated_Source\PSoC5/PWM_SPO2.c **** *
 189:Generated_Source\PSoC5/PWM_SPO2.c **** * Parameters:
 190:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
 191:Generated_Source\PSoC5/PWM_SPO2.c **** *
 192:Generated_Source\PSoC5/PWM_SPO2.c **** * Return:
 193:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
 194:Generated_Source\PSoC5/PWM_SPO2.c **** *
 195:Generated_Source\PSoC5/PWM_SPO2.c **** * Side Effects:
 196:Generated_Source\PSoC5/PWM_SPO2.c **** *  This works only if software enable mode is chosen
 197:Generated_Source\PSoC5/PWM_SPO2.c **** *
 198:Generated_Source\PSoC5/PWM_SPO2.c **** *******************************************************************************/
 199:Generated_Source\PSoC5/PWM_SPO2.c **** void PWM_SPO2_Enable(void) 
 200:Generated_Source\PSoC5/PWM_SPO2.c **** {
  28              		.loc 1 200 0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 5


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
 201:Generated_Source\PSoC5/PWM_SPO2.c ****     /* Globally Enable the Fixed Function Block chosen */
 202:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UsingFixedFunction)
 203:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_GLOBAL_ENABLE |= PWM_SPO2_BLOCK_EN_MASK;
 204:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_GLOBAL_STBY_ENABLE |= PWM_SPO2_BLOCK_STBY_EN_MASK;
 205:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UsingFixedFunction) */
 206:Generated_Source\PSoC5/PWM_SPO2.c **** 
 207:Generated_Source\PSoC5/PWM_SPO2.c ****     /* Enable the PWM from the control register  */
 208:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UseControl || PWM_SPO2_UsingFixedFunction)
 209:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_CONTROL |= PWM_SPO2_CTRL_ENABLE;
  33              		.loc 1 209 0
  34 0000 024A     		ldr	r2, .L2
  35 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  36 0004 43F08003 		orr	r3, r3, #128
  37 0008 1370     		strb	r3, [r2]
  38 000a 7047     		bx	lr
  39              	.L3:
  40              		.align	2
  41              	.L2:
  42 000c 78640040 		.word	1073767544
  43              		.cfi_endproc
  44              	.LFE2:
  45              		.size	PWM_SPO2_Enable, .-PWM_SPO2_Enable
  46              		.section	.text.PWM_SPO2_Stop,"ax",%progbits
  47              		.align	2
  48              		.global	PWM_SPO2_Stop
  49              		.thumb
  50              		.thumb_func
  51              		.type	PWM_SPO2_Stop, %function
  52              	PWM_SPO2_Stop:
  53              	.LFB3:
 210:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UseControl || PWM_SPO2_UsingFixedFunction) */
 211:Generated_Source\PSoC5/PWM_SPO2.c **** }
 212:Generated_Source\PSoC5/PWM_SPO2.c **** 
 213:Generated_Source\PSoC5/PWM_SPO2.c **** 
 214:Generated_Source\PSoC5/PWM_SPO2.c **** /*******************************************************************************
 215:Generated_Source\PSoC5/PWM_SPO2.c **** * Function Name: PWM_SPO2_Stop
 216:Generated_Source\PSoC5/PWM_SPO2.c **** ********************************************************************************
 217:Generated_Source\PSoC5/PWM_SPO2.c **** *
 218:Generated_Source\PSoC5/PWM_SPO2.c **** * Summary:
 219:Generated_Source\PSoC5/PWM_SPO2.c **** *  The stop function halts the PWM, but does not change any modes or disable
 220:Generated_Source\PSoC5/PWM_SPO2.c **** *  interrupts.
 221:Generated_Source\PSoC5/PWM_SPO2.c **** *
 222:Generated_Source\PSoC5/PWM_SPO2.c **** * Parameters:
 223:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
 224:Generated_Source\PSoC5/PWM_SPO2.c **** *
 225:Generated_Source\PSoC5/PWM_SPO2.c **** * Return:
 226:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
 227:Generated_Source\PSoC5/PWM_SPO2.c **** *
 228:Generated_Source\PSoC5/PWM_SPO2.c **** * Side Effects:
 229:Generated_Source\PSoC5/PWM_SPO2.c **** *  If the Enable mode is set to Hardware only then this function
 230:Generated_Source\PSoC5/PWM_SPO2.c **** *  has no effect on the operation of the PWM
 231:Generated_Source\PSoC5/PWM_SPO2.c **** *
 232:Generated_Source\PSoC5/PWM_SPO2.c **** *******************************************************************************/
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 6


 233:Generated_Source\PSoC5/PWM_SPO2.c **** void PWM_SPO2_Stop(void) 
 234:Generated_Source\PSoC5/PWM_SPO2.c **** {
  54              		.loc 1 234 0
  55              		.cfi_startproc
  56              		@ args = 0, pretend = 0, frame = 0
  57              		@ frame_needed = 0, uses_anonymous_args = 0
  58              		@ link register save eliminated.
 235:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UseControl || PWM_SPO2_UsingFixedFunction)
 236:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_CONTROL &= ((uint8)(~PWM_SPO2_CTRL_ENABLE));
  59              		.loc 1 236 0
  60 0000 024A     		ldr	r2, .L5
  61 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  62 0004 03F07F03 		and	r3, r3, #127
  63 0008 1370     		strb	r3, [r2]
  64 000a 7047     		bx	lr
  65              	.L6:
  66              		.align	2
  67              	.L5:
  68 000c 78640040 		.word	1073767544
  69              		.cfi_endproc
  70              	.LFE3:
  71              		.size	PWM_SPO2_Stop, .-PWM_SPO2_Stop
  72              		.section	.text.PWM_SPO2_WriteCounter,"ax",%progbits
  73              		.align	2
  74              		.global	PWM_SPO2_WriteCounter
  75              		.thumb
  76              		.thumb_func
  77              		.type	PWM_SPO2_WriteCounter, %function
  78              	PWM_SPO2_WriteCounter:
  79              	.LFB4:
 237:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UseControl || PWM_SPO2_UsingFixedFunction) */
 238:Generated_Source\PSoC5/PWM_SPO2.c **** 
 239:Generated_Source\PSoC5/PWM_SPO2.c ****     /* Globally disable the Fixed Function Block chosen */
 240:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UsingFixedFunction)
 241:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_GLOBAL_ENABLE &= ((uint8)(~PWM_SPO2_BLOCK_EN_MASK));
 242:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_GLOBAL_STBY_ENABLE &= ((uint8)(~PWM_SPO2_BLOCK_STBY_EN_MASK));
 243:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UsingFixedFunction) */
 244:Generated_Source\PSoC5/PWM_SPO2.c **** }
 245:Generated_Source\PSoC5/PWM_SPO2.c **** 
 246:Generated_Source\PSoC5/PWM_SPO2.c **** #if (PWM_SPO2_UseOneCompareMode)
 247:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_CompareMode1SW)
 248:Generated_Source\PSoC5/PWM_SPO2.c **** 
 249:Generated_Source\PSoC5/PWM_SPO2.c **** 
 250:Generated_Source\PSoC5/PWM_SPO2.c ****         /*******************************************************************************
 251:Generated_Source\PSoC5/PWM_SPO2.c ****         * Function Name: PWM_SPO2_SetCompareMode
 252:Generated_Source\PSoC5/PWM_SPO2.c ****         ********************************************************************************
 253:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 254:Generated_Source\PSoC5/PWM_SPO2.c ****         * Summary:
 255:Generated_Source\PSoC5/PWM_SPO2.c ****         *  This function writes the Compare Mode for the pwm output when in Dither mode,
 256:Generated_Source\PSoC5/PWM_SPO2.c ****         *  Center Align Mode or One Output Mode.
 257:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 258:Generated_Source\PSoC5/PWM_SPO2.c ****         * Parameters:
 259:Generated_Source\PSoC5/PWM_SPO2.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 260:Generated_Source\PSoC5/PWM_SPO2.c ****         *                defined in the H file as input arguments.
 261:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 262:Generated_Source\PSoC5/PWM_SPO2.c ****         * Return:
 263:Generated_Source\PSoC5/PWM_SPO2.c ****         *  None
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 7


 264:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 265:Generated_Source\PSoC5/PWM_SPO2.c ****         *******************************************************************************/
 266:Generated_Source\PSoC5/PWM_SPO2.c ****         void PWM_SPO2_SetCompareMode(uint8 comparemode) 
 267:Generated_Source\PSoC5/PWM_SPO2.c ****         {
 268:Generated_Source\PSoC5/PWM_SPO2.c ****             #if(PWM_SPO2_UsingFixedFunction)
 269:Generated_Source\PSoC5/PWM_SPO2.c **** 
 270:Generated_Source\PSoC5/PWM_SPO2.c ****                 #if(0 != PWM_SPO2_CTRL_CMPMODE1_SHIFT)
 271:Generated_Source\PSoC5/PWM_SPO2.c ****                     uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_SPO2_CTRL_CMPMODE1
 272:Generated_Source\PSoC5/PWM_SPO2.c ****                 #else
 273:Generated_Source\PSoC5/PWM_SPO2.c ****                     uint8 comparemodemasked = comparemode;
 274:Generated_Source\PSoC5/PWM_SPO2.c ****                 #endif /* (0 != PWM_SPO2_CTRL_CMPMODE1_SHIFT) */
 275:Generated_Source\PSoC5/PWM_SPO2.c **** 
 276:Generated_Source\PSoC5/PWM_SPO2.c ****                 PWM_SPO2_CONTROL3 &= ((uint8)(~PWM_SPO2_CTRL_CMPMODE1_MASK)); /*Clear Existing Data
 277:Generated_Source\PSoC5/PWM_SPO2.c ****                 PWM_SPO2_CONTROL3 |= comparemodemasked;
 278:Generated_Source\PSoC5/PWM_SPO2.c **** 
 279:Generated_Source\PSoC5/PWM_SPO2.c ****             #elif (PWM_SPO2_UseControl)
 280:Generated_Source\PSoC5/PWM_SPO2.c **** 
 281:Generated_Source\PSoC5/PWM_SPO2.c ****                 #if(0 != PWM_SPO2_CTRL_CMPMODE1_SHIFT)
 282:Generated_Source\PSoC5/PWM_SPO2.c ****                     uint8 comparemode1masked = ((uint8)((uint8)comparemode << PWM_SPO2_CTRL_CMPMODE
 283:Generated_Source\PSoC5/PWM_SPO2.c ****                                                 PWM_SPO2_CTRL_CMPMODE1_MASK;
 284:Generated_Source\PSoC5/PWM_SPO2.c ****                 #else
 285:Generated_Source\PSoC5/PWM_SPO2.c ****                     uint8 comparemode1masked = comparemode & PWM_SPO2_CTRL_CMPMODE1_MASK;
 286:Generated_Source\PSoC5/PWM_SPO2.c ****                 #endif /* (0 != PWM_SPO2_CTRL_CMPMODE1_SHIFT) */
 287:Generated_Source\PSoC5/PWM_SPO2.c **** 
 288:Generated_Source\PSoC5/PWM_SPO2.c ****                 #if(0 != PWM_SPO2_CTRL_CMPMODE2_SHIFT)
 289:Generated_Source\PSoC5/PWM_SPO2.c ****                     uint8 comparemode2masked = ((uint8)((uint8)comparemode << PWM_SPO2_CTRL_CMPMODE
 290:Generated_Source\PSoC5/PWM_SPO2.c ****                                                PWM_SPO2_CTRL_CMPMODE2_MASK;
 291:Generated_Source\PSoC5/PWM_SPO2.c ****                 #else
 292:Generated_Source\PSoC5/PWM_SPO2.c ****                     uint8 comparemode2masked = comparemode & PWM_SPO2_CTRL_CMPMODE2_MASK;
 293:Generated_Source\PSoC5/PWM_SPO2.c ****                 #endif /* (0 != PWM_SPO2_CTRL_CMPMODE2_SHIFT) */
 294:Generated_Source\PSoC5/PWM_SPO2.c **** 
 295:Generated_Source\PSoC5/PWM_SPO2.c ****                 /*Clear existing mode */
 296:Generated_Source\PSoC5/PWM_SPO2.c ****                 PWM_SPO2_CONTROL &= ((uint8)(~(PWM_SPO2_CTRL_CMPMODE1_MASK |
 297:Generated_Source\PSoC5/PWM_SPO2.c ****                                             PWM_SPO2_CTRL_CMPMODE2_MASK)));
 298:Generated_Source\PSoC5/PWM_SPO2.c ****                 PWM_SPO2_CONTROL |= (comparemode1masked | comparemode2masked);
 299:Generated_Source\PSoC5/PWM_SPO2.c **** 
 300:Generated_Source\PSoC5/PWM_SPO2.c ****             #else
 301:Generated_Source\PSoC5/PWM_SPO2.c ****                 uint8 temp = comparemode;
 302:Generated_Source\PSoC5/PWM_SPO2.c ****             #endif /* (PWM_SPO2_UsingFixedFunction) */
 303:Generated_Source\PSoC5/PWM_SPO2.c ****         }
 304:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* PWM_SPO2_CompareMode1SW */
 305:Generated_Source\PSoC5/PWM_SPO2.c **** 
 306:Generated_Source\PSoC5/PWM_SPO2.c **** #else /* UseOneCompareMode */
 307:Generated_Source\PSoC5/PWM_SPO2.c **** 
 308:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_CompareMode1SW)
 309:Generated_Source\PSoC5/PWM_SPO2.c **** 
 310:Generated_Source\PSoC5/PWM_SPO2.c **** 
 311:Generated_Source\PSoC5/PWM_SPO2.c ****         /*******************************************************************************
 312:Generated_Source\PSoC5/PWM_SPO2.c ****         * Function Name: PWM_SPO2_SetCompareMode1
 313:Generated_Source\PSoC5/PWM_SPO2.c ****         ********************************************************************************
 314:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 315:Generated_Source\PSoC5/PWM_SPO2.c ****         * Summary:
 316:Generated_Source\PSoC5/PWM_SPO2.c ****         *  This function writes the Compare Mode for the pwm or pwm1 output
 317:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 318:Generated_Source\PSoC5/PWM_SPO2.c ****         * Parameters:
 319:Generated_Source\PSoC5/PWM_SPO2.c ****         *  comparemode:  The new compare mode for the PWM output. Use the compare types
 320:Generated_Source\PSoC5/PWM_SPO2.c ****         *                defined in the H file as input arguments.
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 8


 321:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 322:Generated_Source\PSoC5/PWM_SPO2.c ****         * Return:
 323:Generated_Source\PSoC5/PWM_SPO2.c ****         *  None
 324:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 325:Generated_Source\PSoC5/PWM_SPO2.c ****         *******************************************************************************/
 326:Generated_Source\PSoC5/PWM_SPO2.c ****         void PWM_SPO2_SetCompareMode1(uint8 comparemode) 
 327:Generated_Source\PSoC5/PWM_SPO2.c ****         {
 328:Generated_Source\PSoC5/PWM_SPO2.c ****             #if(0 != PWM_SPO2_CTRL_CMPMODE1_SHIFT)
 329:Generated_Source\PSoC5/PWM_SPO2.c ****                 uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_SPO2_CTRL_CMPMODE1_SHI
 330:Generated_Source\PSoC5/PWM_SPO2.c ****                                            PWM_SPO2_CTRL_CMPMODE1_MASK;
 331:Generated_Source\PSoC5/PWM_SPO2.c ****             #else
 332:Generated_Source\PSoC5/PWM_SPO2.c ****                 uint8 comparemodemasked = comparemode & PWM_SPO2_CTRL_CMPMODE1_MASK;
 333:Generated_Source\PSoC5/PWM_SPO2.c ****             #endif /* (0 != PWM_SPO2_CTRL_CMPMODE1_SHIFT) */
 334:Generated_Source\PSoC5/PWM_SPO2.c **** 
 335:Generated_Source\PSoC5/PWM_SPO2.c ****             #if (PWM_SPO2_UseControl)
 336:Generated_Source\PSoC5/PWM_SPO2.c ****                 PWM_SPO2_CONTROL &= ((uint8)(~PWM_SPO2_CTRL_CMPMODE1_MASK)); /*Clear existing mode 
 337:Generated_Source\PSoC5/PWM_SPO2.c ****                 PWM_SPO2_CONTROL |= comparemodemasked;
 338:Generated_Source\PSoC5/PWM_SPO2.c ****             #endif /* (PWM_SPO2_UseControl) */
 339:Generated_Source\PSoC5/PWM_SPO2.c ****         }
 340:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* PWM_SPO2_CompareMode1SW */
 341:Generated_Source\PSoC5/PWM_SPO2.c **** 
 342:Generated_Source\PSoC5/PWM_SPO2.c **** #if (PWM_SPO2_CompareMode2SW)
 343:Generated_Source\PSoC5/PWM_SPO2.c **** 
 344:Generated_Source\PSoC5/PWM_SPO2.c **** 
 345:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 346:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_SetCompareMode2
 347:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 348:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 349:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 350:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This function writes the Compare Mode for the pwm or pwm2 output
 351:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 352:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 353:Generated_Source\PSoC5/PWM_SPO2.c ****     *  comparemode:  The new compare mode for the PWM output. Use the compare types
 354:Generated_Source\PSoC5/PWM_SPO2.c ****     *                defined in the H file as input arguments.
 355:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 356:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 357:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 358:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 359:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 360:Generated_Source\PSoC5/PWM_SPO2.c ****     void PWM_SPO2_SetCompareMode2(uint8 comparemode) 
 361:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 362:Generated_Source\PSoC5/PWM_SPO2.c **** 
 363:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(0 != PWM_SPO2_CTRL_CMPMODE2_SHIFT)
 364:Generated_Source\PSoC5/PWM_SPO2.c ****             uint8 comparemodemasked = ((uint8)((uint8)comparemode << PWM_SPO2_CTRL_CMPMODE2_SHIFT))
 365:Generated_Source\PSoC5/PWM_SPO2.c ****                                                  PWM_SPO2_CTRL_CMPMODE2_MASK;
 366:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 367:Generated_Source\PSoC5/PWM_SPO2.c ****             uint8 comparemodemasked = comparemode & PWM_SPO2_CTRL_CMPMODE2_MASK;
 368:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (0 != PWM_SPO2_CTRL_CMPMODE2_SHIFT) */
 369:Generated_Source\PSoC5/PWM_SPO2.c **** 
 370:Generated_Source\PSoC5/PWM_SPO2.c ****         #if (PWM_SPO2_UseControl)
 371:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_CONTROL &= ((uint8)(~PWM_SPO2_CTRL_CMPMODE2_MASK)); /*Clear existing mode */
 372:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_CONTROL |= comparemodemasked;
 373:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UseControl) */
 374:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 375:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /*PWM_SPO2_CompareMode2SW */
 376:Generated_Source\PSoC5/PWM_SPO2.c **** 
 377:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* UseOneCompareMode */
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 9


 378:Generated_Source\PSoC5/PWM_SPO2.c **** 
 379:Generated_Source\PSoC5/PWM_SPO2.c **** 
 380:Generated_Source\PSoC5/PWM_SPO2.c **** #if (!PWM_SPO2_UsingFixedFunction)
 381:Generated_Source\PSoC5/PWM_SPO2.c **** 
 382:Generated_Source\PSoC5/PWM_SPO2.c **** 
 383:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 384:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_WriteCounter
 385:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 386:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 387:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 388:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Writes a new counter value directly to the counter register. This will be
 389:Generated_Source\PSoC5/PWM_SPO2.c ****     *  implemented for that currently running period and only that period. This API
 390:Generated_Source\PSoC5/PWM_SPO2.c ****     *  is valid only for UDB implementation and not available for fixed function
 391:Generated_Source\PSoC5/PWM_SPO2.c ****     *  PWM implementation.
 392:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 393:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 394:Generated_Source\PSoC5/PWM_SPO2.c ****     *  counter:  The period new period counter value.
 395:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 396:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 397:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 398:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 399:Generated_Source\PSoC5/PWM_SPO2.c ****     * Side Effects:
 400:Generated_Source\PSoC5/PWM_SPO2.c ****     *  The PWM Period will be reloaded when a counter value will be a zero
 401:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 402:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 403:Generated_Source\PSoC5/PWM_SPO2.c ****     void PWM_SPO2_WriteCounter(uint8 counter) \
 404:Generated_Source\PSoC5/PWM_SPO2.c ****                                        
 405:Generated_Source\PSoC5/PWM_SPO2.c ****     {
  80              		.loc 1 405 0
  81              		.cfi_startproc
  82              		@ args = 0, pretend = 0, frame = 0
  83              		@ frame_needed = 0, uses_anonymous_args = 0
  84              		@ link register save eliminated.
  85              	.LVL0:
 406:Generated_Source\PSoC5/PWM_SPO2.c ****         CY_SET_REG8(PWM_SPO2_COUNTER_LSB_PTR, counter);
  86              		.loc 1 406 0
  87 0000 014B     		ldr	r3, .L8
  88 0002 1870     		strb	r0, [r3]
  89 0004 7047     		bx	lr
  90              	.L9:
  91 0006 00BF     		.align	2
  92              	.L8:
  93 0008 08640040 		.word	1073767432
  94              		.cfi_endproc
  95              	.LFE4:
  96              		.size	PWM_SPO2_WriteCounter, .-PWM_SPO2_WriteCounter
  97              		.section	.text.PWM_SPO2_ReadCounter,"ax",%progbits
  98              		.align	2
  99              		.global	PWM_SPO2_ReadCounter
 100              		.thumb
 101              		.thumb_func
 102              		.type	PWM_SPO2_ReadCounter, %function
 103              	PWM_SPO2_ReadCounter:
 104              	.LFB5:
 407:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 408:Generated_Source\PSoC5/PWM_SPO2.c **** 
 409:Generated_Source\PSoC5/PWM_SPO2.c **** 
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 10


 410:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 411:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_ReadCounter
 412:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 413:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 414:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 415:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This function returns the current value of the counter.  It doesn't matter
 416:Generated_Source\PSoC5/PWM_SPO2.c ****     *  if the counter is enabled or running.
 417:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 418:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 419:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 420:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 421:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 422:Generated_Source\PSoC5/PWM_SPO2.c ****     *  The current value of the counter.
 423:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 424:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 425:Generated_Source\PSoC5/PWM_SPO2.c ****     uint8 PWM_SPO2_ReadCounter(void) 
 426:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 105              		.loc 1 426 0
 106              		.cfi_startproc
 107              		@ args = 0, pretend = 0, frame = 0
 108              		@ frame_needed = 0, uses_anonymous_args = 0
 109              		@ link register save eliminated.
 427:Generated_Source\PSoC5/PWM_SPO2.c ****         /* Force capture by reading Accumulator */
 428:Generated_Source\PSoC5/PWM_SPO2.c ****         /* Must first do a software capture to be able to read the counter */
 429:Generated_Source\PSoC5/PWM_SPO2.c ****         /* It is up to the user code to make sure there isn't already captured data in the FIFO */
 430:Generated_Source\PSoC5/PWM_SPO2.c ****           (void)CY_GET_REG8(PWM_SPO2_COUNTERCAP_LSB_PTR_8BIT);
 110              		.loc 1 430 0
 111 0000 024B     		ldr	r3, .L11
 112 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 431:Generated_Source\PSoC5/PWM_SPO2.c **** 
 432:Generated_Source\PSoC5/PWM_SPO2.c ****         /* Read the data from the FIFO */
 433:Generated_Source\PSoC5/PWM_SPO2.c ****         return (CY_GET_REG8(PWM_SPO2_CAPTURE_LSB_PTR));
 113              		.loc 1 433 0
 114 0004 024B     		ldr	r3, .L11+4
 115 0006 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 434:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 116              		.loc 1 434 0
 117 0008 7047     		bx	lr
 118              	.L12:
 119 000a 00BF     		.align	2
 120              	.L11:
 121 000c 18640040 		.word	1073767448
 122 0010 58640040 		.word	1073767512
 123              		.cfi_endproc
 124              	.LFE5:
 125              		.size	PWM_SPO2_ReadCounter, .-PWM_SPO2_ReadCounter
 126              		.section	.text.PWM_SPO2_WritePeriod,"ax",%progbits
 127              		.align	2
 128              		.global	PWM_SPO2_WritePeriod
 129              		.thumb
 130              		.thumb_func
 131              		.type	PWM_SPO2_WritePeriod, %function
 132              	PWM_SPO2_WritePeriod:
 133              	.LFB7:
 435:Generated_Source\PSoC5/PWM_SPO2.c **** 
 436:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UseStatus)
 437:Generated_Source\PSoC5/PWM_SPO2.c **** 
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 11


 438:Generated_Source\PSoC5/PWM_SPO2.c **** 
 439:Generated_Source\PSoC5/PWM_SPO2.c ****         /*******************************************************************************
 440:Generated_Source\PSoC5/PWM_SPO2.c ****         * Function Name: PWM_SPO2_ClearFIFO
 441:Generated_Source\PSoC5/PWM_SPO2.c ****         ********************************************************************************
 442:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 443:Generated_Source\PSoC5/PWM_SPO2.c ****         * Summary:
 444:Generated_Source\PSoC5/PWM_SPO2.c ****         *  This function clears all capture data from the capture FIFO
 445:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 446:Generated_Source\PSoC5/PWM_SPO2.c ****         * Parameters:
 447:Generated_Source\PSoC5/PWM_SPO2.c ****         *  None
 448:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 449:Generated_Source\PSoC5/PWM_SPO2.c ****         * Return:
 450:Generated_Source\PSoC5/PWM_SPO2.c ****         *  None
 451:Generated_Source\PSoC5/PWM_SPO2.c ****         *
 452:Generated_Source\PSoC5/PWM_SPO2.c ****         *******************************************************************************/
 453:Generated_Source\PSoC5/PWM_SPO2.c ****         void PWM_SPO2_ClearFIFO(void) 
 454:Generated_Source\PSoC5/PWM_SPO2.c ****         {
 455:Generated_Source\PSoC5/PWM_SPO2.c ****             while(0u != (PWM_SPO2_ReadStatusRegister() & PWM_SPO2_STATUS_FIFONEMPTY))
 456:Generated_Source\PSoC5/PWM_SPO2.c ****             {
 457:Generated_Source\PSoC5/PWM_SPO2.c ****                 (void)PWM_SPO2_ReadCapture();
 458:Generated_Source\PSoC5/PWM_SPO2.c ****             }
 459:Generated_Source\PSoC5/PWM_SPO2.c ****         }
 460:Generated_Source\PSoC5/PWM_SPO2.c **** 
 461:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* PWM_SPO2_UseStatus */
 462:Generated_Source\PSoC5/PWM_SPO2.c **** 
 463:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* !PWM_SPO2_UsingFixedFunction */
 464:Generated_Source\PSoC5/PWM_SPO2.c **** 
 465:Generated_Source\PSoC5/PWM_SPO2.c **** 
 466:Generated_Source\PSoC5/PWM_SPO2.c **** /*******************************************************************************
 467:Generated_Source\PSoC5/PWM_SPO2.c **** * Function Name: PWM_SPO2_WritePeriod
 468:Generated_Source\PSoC5/PWM_SPO2.c **** ********************************************************************************
 469:Generated_Source\PSoC5/PWM_SPO2.c **** *
 470:Generated_Source\PSoC5/PWM_SPO2.c **** * Summary:
 471:Generated_Source\PSoC5/PWM_SPO2.c **** *  This function is used to change the period of the counter.  The new period
 472:Generated_Source\PSoC5/PWM_SPO2.c **** *  will be loaded the next time terminal count is detected.
 473:Generated_Source\PSoC5/PWM_SPO2.c **** *
 474:Generated_Source\PSoC5/PWM_SPO2.c **** * Parameters:
 475:Generated_Source\PSoC5/PWM_SPO2.c **** *  period:  Period value. May be between 1 and (2^Resolution)-1.  A value of 0
 476:Generated_Source\PSoC5/PWM_SPO2.c **** *           will result in the counter remaining at zero.
 477:Generated_Source\PSoC5/PWM_SPO2.c **** *
 478:Generated_Source\PSoC5/PWM_SPO2.c **** * Return:
 479:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
 480:Generated_Source\PSoC5/PWM_SPO2.c **** *
 481:Generated_Source\PSoC5/PWM_SPO2.c **** *******************************************************************************/
 482:Generated_Source\PSoC5/PWM_SPO2.c **** void PWM_SPO2_WritePeriod(uint8 period) 
 483:Generated_Source\PSoC5/PWM_SPO2.c **** {
 134              		.loc 1 483 0
 135              		.cfi_startproc
 136              		@ args = 0, pretend = 0, frame = 0
 137              		@ frame_needed = 0, uses_anonymous_args = 0
 138              		@ link register save eliminated.
 139              	.LVL1:
 484:Generated_Source\PSoC5/PWM_SPO2.c ****     #if(PWM_SPO2_UsingFixedFunction)
 485:Generated_Source\PSoC5/PWM_SPO2.c ****         CY_SET_REG16(PWM_SPO2_PERIOD_LSB_PTR, (uint16)period);
 486:Generated_Source\PSoC5/PWM_SPO2.c ****     #else
 487:Generated_Source\PSoC5/PWM_SPO2.c ****         CY_SET_REG8(PWM_SPO2_PERIOD_LSB_PTR, period);
 140              		.loc 1 487 0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 12


 141 0000 014B     		ldr	r3, .L14
 142 0002 1870     		strb	r0, [r3]
 143 0004 7047     		bx	lr
 144              	.L15:
 145 0006 00BF     		.align	2
 146              	.L14:
 147 0008 48640040 		.word	1073767496
 148              		.cfi_endproc
 149              	.LFE7:
 150              		.size	PWM_SPO2_WritePeriod, .-PWM_SPO2_WritePeriod
 151              		.section	.text.PWM_SPO2_WriteCompare,"ax",%progbits
 152              		.align	2
 153              		.global	PWM_SPO2_WriteCompare
 154              		.thumb
 155              		.thumb_func
 156              		.type	PWM_SPO2_WriteCompare, %function
 157              	PWM_SPO2_WriteCompare:
 158              	.LFB8:
 488:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UsingFixedFunction) */
 489:Generated_Source\PSoC5/PWM_SPO2.c **** }
 490:Generated_Source\PSoC5/PWM_SPO2.c **** 
 491:Generated_Source\PSoC5/PWM_SPO2.c **** #if (PWM_SPO2_UseOneCompareMode)
 492:Generated_Source\PSoC5/PWM_SPO2.c **** 
 493:Generated_Source\PSoC5/PWM_SPO2.c **** 
 494:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 495:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_WriteCompare
 496:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 497:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 498:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 499:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This funtion is used to change the compare1 value when the PWM is in Dither
 500:Generated_Source\PSoC5/PWM_SPO2.c ****     *  mode. The compare output will reflect the new value on the next UDB clock.
 501:Generated_Source\PSoC5/PWM_SPO2.c ****     *  The compare output will be driven high when the present counter value is
 502:Generated_Source\PSoC5/PWM_SPO2.c ****     *  compared to the compare value based on the compare mode defined in
 503:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Dither Mode.
 504:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 505:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 506:Generated_Source\PSoC5/PWM_SPO2.c ****     *  compare:  New compare value.
 507:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 508:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 509:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 510:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 511:Generated_Source\PSoC5/PWM_SPO2.c ****     * Side Effects:
 512:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This function is only available if the PWM mode parameter is set to
 513:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Dither Mode, Center Aligned Mode or One Output Mode
 514:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 515:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 516:Generated_Source\PSoC5/PWM_SPO2.c ****     void PWM_SPO2_WriteCompare(uint8 compare) \
 517:Generated_Source\PSoC5/PWM_SPO2.c ****                                        
 518:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 159              		.loc 1 518 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              		@ link register save eliminated.
 164              	.LVL2:
 519:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(PWM_SPO2_UsingFixedFunction)
 520:Generated_Source\PSoC5/PWM_SPO2.c ****             CY_SET_REG16(PWM_SPO2_COMPARE1_LSB_PTR, (uint16)compare);
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 13


 521:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 522:Generated_Source\PSoC5/PWM_SPO2.c ****             CY_SET_REG8(PWM_SPO2_COMPARE1_LSB_PTR, compare);
 165              		.loc 1 522 0
 166 0000 014B     		ldr	r3, .L17
 167 0002 1870     		strb	r0, [r3]
 168 0004 7047     		bx	lr
 169              	.L18:
 170 0006 00BF     		.align	2
 171              	.L17:
 172 0008 28640040 		.word	1073767464
 173              		.cfi_endproc
 174              	.LFE8:
 175              		.size	PWM_SPO2_WriteCompare, .-PWM_SPO2_WriteCompare
 176              		.section	.text.PWM_SPO2_SetInterruptMode,"ax",%progbits
 177              		.align	2
 178              		.global	PWM_SPO2_SetInterruptMode
 179              		.thumb
 180              		.thumb_func
 181              		.type	PWM_SPO2_SetInterruptMode, %function
 182              	PWM_SPO2_SetInterruptMode:
 183              	.LFB9:
 523:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UsingFixedFunction) */
 524:Generated_Source\PSoC5/PWM_SPO2.c **** 
 525:Generated_Source\PSoC5/PWM_SPO2.c ****         #if (PWM_SPO2_PWMMode == PWM_SPO2__B_PWM__DITHER)
 526:Generated_Source\PSoC5/PWM_SPO2.c ****             #if(PWM_SPO2_UsingFixedFunction)
 527:Generated_Source\PSoC5/PWM_SPO2.c ****                 CY_SET_REG16(PWM_SPO2_COMPARE2_LSB_PTR, (uint16)(compare + 1u));
 528:Generated_Source\PSoC5/PWM_SPO2.c ****             #else
 529:Generated_Source\PSoC5/PWM_SPO2.c ****                 CY_SET_REG8(PWM_SPO2_COMPARE2_LSB_PTR, (compare + 1u));
 530:Generated_Source\PSoC5/PWM_SPO2.c ****             #endif /* (PWM_SPO2_UsingFixedFunction) */
 531:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_PWMMode == PWM_SPO2__B_PWM__DITHER) */
 532:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 533:Generated_Source\PSoC5/PWM_SPO2.c **** 
 534:Generated_Source\PSoC5/PWM_SPO2.c **** 
 535:Generated_Source\PSoC5/PWM_SPO2.c **** #else
 536:Generated_Source\PSoC5/PWM_SPO2.c **** 
 537:Generated_Source\PSoC5/PWM_SPO2.c **** 
 538:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 539:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_WriteCompare1
 540:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 541:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 542:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 543:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This funtion is used to change the compare1 value.  The compare output will
 544:Generated_Source\PSoC5/PWM_SPO2.c ****     *  reflect the new value on the next UDB clock.  The compare output will be
 545:Generated_Source\PSoC5/PWM_SPO2.c ****     *  driven high when the present counter value is less than or less than or
 546:Generated_Source\PSoC5/PWM_SPO2.c ****     *  equal to the compare register, depending on the mode.
 547:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 548:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 549:Generated_Source\PSoC5/PWM_SPO2.c ****     *  compare:  New compare value.
 550:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 551:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 552:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 553:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 554:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 555:Generated_Source\PSoC5/PWM_SPO2.c ****     void PWM_SPO2_WriteCompare1(uint8 compare) \
 556:Generated_Source\PSoC5/PWM_SPO2.c ****                                         
 557:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 558:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(PWM_SPO2_UsingFixedFunction)
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 14


 559:Generated_Source\PSoC5/PWM_SPO2.c ****             CY_SET_REG16(PWM_SPO2_COMPARE1_LSB_PTR, (uint16)compare);
 560:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 561:Generated_Source\PSoC5/PWM_SPO2.c ****             CY_SET_REG8(PWM_SPO2_COMPARE1_LSB_PTR, compare);
 562:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UsingFixedFunction) */
 563:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 564:Generated_Source\PSoC5/PWM_SPO2.c **** 
 565:Generated_Source\PSoC5/PWM_SPO2.c **** 
 566:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 567:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_WriteCompare2
 568:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 569:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 570:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 571:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This funtion is used to change the compare value, for compare1 output.
 572:Generated_Source\PSoC5/PWM_SPO2.c ****     *  The compare output will reflect the new value on the next UDB clock.
 573:Generated_Source\PSoC5/PWM_SPO2.c ****     *  The compare output will be driven high when the present counter value is
 574:Generated_Source\PSoC5/PWM_SPO2.c ****     *  less than or less than or equal to the compare register, depending on the
 575:Generated_Source\PSoC5/PWM_SPO2.c ****     *  mode.
 576:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 577:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 578:Generated_Source\PSoC5/PWM_SPO2.c ****     *  compare:  New compare value.
 579:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 580:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 581:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 582:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 583:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 584:Generated_Source\PSoC5/PWM_SPO2.c ****     void PWM_SPO2_WriteCompare2(uint8 compare) \
 585:Generated_Source\PSoC5/PWM_SPO2.c ****                                         
 586:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 587:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(PWM_SPO2_UsingFixedFunction)
 588:Generated_Source\PSoC5/PWM_SPO2.c ****             CY_SET_REG16(PWM_SPO2_COMPARE2_LSB_PTR, compare);
 589:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 590:Generated_Source\PSoC5/PWM_SPO2.c ****             CY_SET_REG8(PWM_SPO2_COMPARE2_LSB_PTR, compare);
 591:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UsingFixedFunction) */
 592:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 593:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* UseOneCompareMode */
 594:Generated_Source\PSoC5/PWM_SPO2.c **** 
 595:Generated_Source\PSoC5/PWM_SPO2.c **** #if (PWM_SPO2_DeadBandUsed)
 596:Generated_Source\PSoC5/PWM_SPO2.c **** 
 597:Generated_Source\PSoC5/PWM_SPO2.c **** 
 598:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 599:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_WriteDeadTime
 600:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 601:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 602:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 603:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This function writes the dead-band counts to the corresponding register
 604:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 605:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 606:Generated_Source\PSoC5/PWM_SPO2.c ****     *  deadtime:  Number of counts for dead time
 607:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 608:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 609:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 610:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 611:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 612:Generated_Source\PSoC5/PWM_SPO2.c ****     void PWM_SPO2_WriteDeadTime(uint8 deadtime) 
 613:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 614:Generated_Source\PSoC5/PWM_SPO2.c ****         /* If using the Dead Band 1-255 mode then just write the register */
 615:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(!PWM_SPO2_DeadBand2_4)
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 15


 616:Generated_Source\PSoC5/PWM_SPO2.c ****             CY_SET_REG8(PWM_SPO2_DEADBAND_COUNT_PTR, deadtime);
 617:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 618:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Otherwise the data has to be masked and offset */
 619:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Clear existing data */
 620:Generated_Source\PSoC5/PWM_SPO2.c ****             PWM_SPO2_DEADBAND_COUNT &= ((uint8)(~PWM_SPO2_DEADBAND_COUNT_MASK));
 621:Generated_Source\PSoC5/PWM_SPO2.c **** 
 622:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Set new dead time */
 623:Generated_Source\PSoC5/PWM_SPO2.c ****             #if(PWM_SPO2_DEADBAND_COUNT_SHIFT)
 624:Generated_Source\PSoC5/PWM_SPO2.c ****                 PWM_SPO2_DEADBAND_COUNT |= ((uint8)((uint8)deadtime << PWM_SPO2_DEADBAND_COUNT_SHIF
 625:Generated_Source\PSoC5/PWM_SPO2.c ****                                                     PWM_SPO2_DEADBAND_COUNT_MASK;
 626:Generated_Source\PSoC5/PWM_SPO2.c ****             #else
 627:Generated_Source\PSoC5/PWM_SPO2.c ****                 PWM_SPO2_DEADBAND_COUNT |= deadtime & PWM_SPO2_DEADBAND_COUNT_MASK;
 628:Generated_Source\PSoC5/PWM_SPO2.c ****             #endif /* (PWM_SPO2_DEADBAND_COUNT_SHIFT) */
 629:Generated_Source\PSoC5/PWM_SPO2.c **** 
 630:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (!PWM_SPO2_DeadBand2_4) */
 631:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 632:Generated_Source\PSoC5/PWM_SPO2.c **** 
 633:Generated_Source\PSoC5/PWM_SPO2.c **** 
 634:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 635:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_ReadDeadTime
 636:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 637:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 638:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 639:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This function reads the dead-band counts from the corresponding register
 640:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 641:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 642:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 643:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 644:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 645:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Dead Band Counts
 646:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 647:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 648:Generated_Source\PSoC5/PWM_SPO2.c ****     uint8 PWM_SPO2_ReadDeadTime(void) 
 649:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 650:Generated_Source\PSoC5/PWM_SPO2.c ****         /* If using the Dead Band 1-255 mode then just read the register */
 651:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(!PWM_SPO2_DeadBand2_4)
 652:Generated_Source\PSoC5/PWM_SPO2.c ****             return (CY_GET_REG8(PWM_SPO2_DEADBAND_COUNT_PTR));
 653:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 654:Generated_Source\PSoC5/PWM_SPO2.c **** 
 655:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Otherwise the data has to be masked and offset */
 656:Generated_Source\PSoC5/PWM_SPO2.c ****             #if(PWM_SPO2_DEADBAND_COUNT_SHIFT)
 657:Generated_Source\PSoC5/PWM_SPO2.c ****                 return ((uint8)(((uint8)(PWM_SPO2_DEADBAND_COUNT & PWM_SPO2_DEADBAND_COUNT_MASK)) >
 658:Generated_Source\PSoC5/PWM_SPO2.c ****                                                                            PWM_SPO2_DEADBAND_COUNT_
 659:Generated_Source\PSoC5/PWM_SPO2.c ****             #else
 660:Generated_Source\PSoC5/PWM_SPO2.c ****                 return (PWM_SPO2_DEADBAND_COUNT & PWM_SPO2_DEADBAND_COUNT_MASK);
 661:Generated_Source\PSoC5/PWM_SPO2.c ****             #endif /* (PWM_SPO2_DEADBAND_COUNT_SHIFT) */
 662:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (!PWM_SPO2_DeadBand2_4) */
 663:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 664:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* DeadBandUsed */
 665:Generated_Source\PSoC5/PWM_SPO2.c **** 
 666:Generated_Source\PSoC5/PWM_SPO2.c **** #if (PWM_SPO2_UseStatus || PWM_SPO2_UsingFixedFunction)
 667:Generated_Source\PSoC5/PWM_SPO2.c **** 
 668:Generated_Source\PSoC5/PWM_SPO2.c **** 
 669:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 670:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_SetInterruptMode
 671:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 672:Generated_Source\PSoC5/PWM_SPO2.c ****     *
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 16


 673:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 674:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This function configures the interrupts mask control of theinterrupt
 675:Generated_Source\PSoC5/PWM_SPO2.c ****     *  source status register.
 676:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 677:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 678:Generated_Source\PSoC5/PWM_SPO2.c ****     *  uint8 interruptMode: Bit field containing the interrupt sources enabled
 679:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 680:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 681:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 682:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 683:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 684:Generated_Source\PSoC5/PWM_SPO2.c ****     void PWM_SPO2_SetInterruptMode(uint8 interruptMode) 
 685:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 184              		.loc 1 685 0
 185              		.cfi_startproc
 186              		@ args = 0, pretend = 0, frame = 0
 187              		@ frame_needed = 0, uses_anonymous_args = 0
 188              		@ link register save eliminated.
 189              	.LVL3:
 686:Generated_Source\PSoC5/PWM_SPO2.c ****         CY_SET_REG8(PWM_SPO2_STATUS_MASK_PTR, interruptMode);
 190              		.loc 1 686 0
 191 0000 014B     		ldr	r3, .L20
 192 0002 1870     		strb	r0, [r3]
 193 0004 7047     		bx	lr
 194              	.L21:
 195 0006 00BF     		.align	2
 196              	.L20:
 197 0008 88640040 		.word	1073767560
 198              		.cfi_endproc
 199              	.LFE9:
 200              		.size	PWM_SPO2_SetInterruptMode, .-PWM_SPO2_SetInterruptMode
 201              		.section	.text.PWM_SPO2_ReadStatusRegister,"ax",%progbits
 202              		.align	2
 203              		.global	PWM_SPO2_ReadStatusRegister
 204              		.thumb
 205              		.thumb_func
 206              		.type	PWM_SPO2_ReadStatusRegister, %function
 207              	PWM_SPO2_ReadStatusRegister:
 208              	.LFB10:
 687:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 688:Generated_Source\PSoC5/PWM_SPO2.c **** 
 689:Generated_Source\PSoC5/PWM_SPO2.c **** 
 690:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 691:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_ReadStatusRegister
 692:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 693:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 694:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 695:Generated_Source\PSoC5/PWM_SPO2.c ****     *  This function returns the current state of the status register.
 696:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 697:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 698:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 699:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 700:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 701:Generated_Source\PSoC5/PWM_SPO2.c ****     *  uint8 : Current status register value. The status register bits are:
 702:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [7:6] : Unused(0)
 703:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [5]   : Kill event output
 704:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [4]   : FIFO not empty
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 17


 705:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [3]   : FIFO full
 706:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [2]   : Terminal count
 707:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [1]   : Compare output 2
 708:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [0]   : Compare output 1
 709:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 710:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 711:Generated_Source\PSoC5/PWM_SPO2.c ****     uint8 PWM_SPO2_ReadStatusRegister(void) 
 712:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 209              		.loc 1 712 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 713:Generated_Source\PSoC5/PWM_SPO2.c ****         return (CY_GET_REG8(PWM_SPO2_STATUS_PTR));
 214              		.loc 1 713 0
 215 0000 014B     		ldr	r3, .L23
 216 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 714:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 217              		.loc 1 714 0
 218 0004 7047     		bx	lr
 219              	.L24:
 220 0006 00BF     		.align	2
 221              	.L23:
 222 0008 68640040 		.word	1073767528
 223              		.cfi_endproc
 224              	.LFE10:
 225              		.size	PWM_SPO2_ReadStatusRegister, .-PWM_SPO2_ReadStatusRegister
 226              		.section	.text.PWM_SPO2_ReadControlRegister,"ax",%progbits
 227              		.align	2
 228              		.global	PWM_SPO2_ReadControlRegister
 229              		.thumb
 230              		.thumb_func
 231              		.type	PWM_SPO2_ReadControlRegister, %function
 232              	PWM_SPO2_ReadControlRegister:
 233              	.LFB11:
 715:Generated_Source\PSoC5/PWM_SPO2.c **** 
 716:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* (PWM_SPO2_UseStatus || PWM_SPO2_UsingFixedFunction) */
 717:Generated_Source\PSoC5/PWM_SPO2.c **** 
 718:Generated_Source\PSoC5/PWM_SPO2.c **** 
 719:Generated_Source\PSoC5/PWM_SPO2.c **** #if (PWM_SPO2_UseControl)
 720:Generated_Source\PSoC5/PWM_SPO2.c **** 
 721:Generated_Source\PSoC5/PWM_SPO2.c **** 
 722:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 723:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_ReadControlRegister
 724:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 725:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 726:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 727:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Returns the current state of the control register. This API is available
 728:Generated_Source\PSoC5/PWM_SPO2.c ****     *  only if the control register is not removed.
 729:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 730:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 731:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 732:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 733:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 734:Generated_Source\PSoC5/PWM_SPO2.c ****     *  uint8 : Current control register value
 735:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 736:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 18


 737:Generated_Source\PSoC5/PWM_SPO2.c ****     uint8 PWM_SPO2_ReadControlRegister(void) 
 738:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 234              		.loc 1 738 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              		@ link register save eliminated.
 739:Generated_Source\PSoC5/PWM_SPO2.c ****         uint8 result;
 740:Generated_Source\PSoC5/PWM_SPO2.c **** 
 741:Generated_Source\PSoC5/PWM_SPO2.c ****         result = CY_GET_REG8(PWM_SPO2_CONTROL_PTR);
 239              		.loc 1 741 0
 240 0000 014B     		ldr	r3, .L26
 241 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 242              	.LVL4:
 742:Generated_Source\PSoC5/PWM_SPO2.c ****         return (result);
 743:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 243              		.loc 1 743 0
 244 0004 7047     		bx	lr
 245              	.L27:
 246 0006 00BF     		.align	2
 247              	.L26:
 248 0008 78640040 		.word	1073767544
 249              		.cfi_endproc
 250              	.LFE11:
 251              		.size	PWM_SPO2_ReadControlRegister, .-PWM_SPO2_ReadControlRegister
 252              		.section	.text.PWM_SPO2_WriteControlRegister,"ax",%progbits
 253              		.align	2
 254              		.global	PWM_SPO2_WriteControlRegister
 255              		.thumb
 256              		.thumb_func
 257              		.type	PWM_SPO2_WriteControlRegister, %function
 258              	PWM_SPO2_WriteControlRegister:
 259              	.LFB12:
 744:Generated_Source\PSoC5/PWM_SPO2.c **** 
 745:Generated_Source\PSoC5/PWM_SPO2.c **** 
 746:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 747:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_WriteControlRegister
 748:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 749:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 750:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 751:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Sets the bit field of the control register. This API is available only if
 752:Generated_Source\PSoC5/PWM_SPO2.c ****     *  the control register is not removed.
 753:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 754:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 755:Generated_Source\PSoC5/PWM_SPO2.c ****     *  uint8 control: Control register bit field, The status register bits are:
 756:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [7]   : PWM Enable
 757:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [6]   : Reset
 758:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [5:3] : Compare Mode2
 759:Generated_Source\PSoC5/PWM_SPO2.c ****     *  [2:0] : Compare Mode2
 760:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 761:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 762:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 763:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 764:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 765:Generated_Source\PSoC5/PWM_SPO2.c ****     void PWM_SPO2_WriteControlRegister(uint8 control) 
 766:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 260              		.loc 1 766 0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 19


 261              		.cfi_startproc
 262              		@ args = 0, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              		@ link register save eliminated.
 265              	.LVL5:
 767:Generated_Source\PSoC5/PWM_SPO2.c ****         CY_SET_REG8(PWM_SPO2_CONTROL_PTR, control);
 266              		.loc 1 767 0
 267 0000 014B     		ldr	r3, .L29
 268 0002 1870     		strb	r0, [r3]
 269 0004 7047     		bx	lr
 270              	.L30:
 271 0006 00BF     		.align	2
 272              	.L29:
 273 0008 78640040 		.word	1073767544
 274              		.cfi_endproc
 275              	.LFE12:
 276              		.size	PWM_SPO2_WriteControlRegister, .-PWM_SPO2_WriteControlRegister
 277              		.section	.text.PWM_SPO2_ReadCapture,"ax",%progbits
 278              		.align	2
 279              		.global	PWM_SPO2_ReadCapture
 280              		.thumb
 281              		.thumb_func
 282              		.type	PWM_SPO2_ReadCapture, %function
 283              	PWM_SPO2_ReadCapture:
 284              	.LFB13:
 768:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 769:Generated_Source\PSoC5/PWM_SPO2.c **** 
 770:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* (PWM_SPO2_UseControl) */
 771:Generated_Source\PSoC5/PWM_SPO2.c **** 
 772:Generated_Source\PSoC5/PWM_SPO2.c **** 
 773:Generated_Source\PSoC5/PWM_SPO2.c **** #if (!PWM_SPO2_UsingFixedFunction)
 774:Generated_Source\PSoC5/PWM_SPO2.c **** 
 775:Generated_Source\PSoC5/PWM_SPO2.c **** 
 776:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 777:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_ReadCapture
 778:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 779:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 780:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 781:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Reads the capture value from the capture FIFO.
 782:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 783:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 784:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 785:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 786:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 787:Generated_Source\PSoC5/PWM_SPO2.c ****     *  uint8/uint16: The current capture value
 788:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 789:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 790:Generated_Source\PSoC5/PWM_SPO2.c ****     uint8 PWM_SPO2_ReadCapture(void) 
 791:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 285              		.loc 1 791 0
 286              		.cfi_startproc
 287              		@ args = 0, pretend = 0, frame = 0
 288              		@ frame_needed = 0, uses_anonymous_args = 0
 289              		@ link register save eliminated.
 792:Generated_Source\PSoC5/PWM_SPO2.c ****         return (CY_GET_REG8(PWM_SPO2_CAPTURE_LSB_PTR));
 290              		.loc 1 792 0
 291 0000 014B     		ldr	r3, .L32
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 20


 292 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 793:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 293              		.loc 1 793 0
 294 0004 7047     		bx	lr
 295              	.L33:
 296 0006 00BF     		.align	2
 297              	.L32:
 298 0008 58640040 		.word	1073767512
 299              		.cfi_endproc
 300              	.LFE13:
 301              		.size	PWM_SPO2_ReadCapture, .-PWM_SPO2_ReadCapture
 302              		.section	.text.PWM_SPO2_ClearFIFO,"ax",%progbits
 303              		.align	2
 304              		.global	PWM_SPO2_ClearFIFO
 305              		.thumb
 306              		.thumb_func
 307              		.type	PWM_SPO2_ClearFIFO, %function
 308              	PWM_SPO2_ClearFIFO:
 309              	.LFB6:
 454:Generated_Source\PSoC5/PWM_SPO2.c ****             while(0u != (PWM_SPO2_ReadStatusRegister() & PWM_SPO2_STATUS_FIFONEMPTY))
 310              		.loc 1 454 0
 311              		.cfi_startproc
 312              		@ args = 0, pretend = 0, frame = 0
 313              		@ frame_needed = 0, uses_anonymous_args = 0
 314 0000 08B5     		push	{r3, lr}
 315              		.cfi_def_cfa_offset 8
 316              		.cfi_offset 3, -8
 317              		.cfi_offset 14, -4
 455:Generated_Source\PSoC5/PWM_SPO2.c ****             {
 318              		.loc 1 455 0
 319 0002 01E0     		b	.L35
 320              	.L36:
 457:Generated_Source\PSoC5/PWM_SPO2.c ****             }
 321              		.loc 1 457 0
 322 0004 FFF7FEFF 		bl	PWM_SPO2_ReadCapture
 323              	.LVL6:
 324              	.L35:
 455:Generated_Source\PSoC5/PWM_SPO2.c ****             {
 325              		.loc 1 455 0
 326 0008 FFF7FEFF 		bl	PWM_SPO2_ReadStatusRegister
 327              	.LVL7:
 328 000c 10F0100F 		tst	r0, #16
 329 0010 F8D1     		bne	.L36
 459:Generated_Source\PSoC5/PWM_SPO2.c **** 
 330              		.loc 1 459 0
 331 0012 08BD     		pop	{r3, pc}
 332              		.cfi_endproc
 333              	.LFE6:
 334              		.size	PWM_SPO2_ClearFIFO, .-PWM_SPO2_ClearFIFO
 335              		.section	.text.PWM_SPO2_Init,"ax",%progbits
 336              		.align	2
 337              		.global	PWM_SPO2_Init
 338              		.thumb
 339              		.thumb_func
 340              		.type	PWM_SPO2_Init, %function
 341              	PWM_SPO2_Init:
 342              	.LFB1:
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 21


  85:Generated_Source\PSoC5/PWM_SPO2.c ****     #if (PWM_SPO2_UsingFixedFunction || PWM_SPO2_UseControl)
 343              		.loc 1 85 0
 344              		.cfi_startproc
 345              		@ args = 0, pretend = 0, frame = 0
 346              		@ frame_needed = 0, uses_anonymous_args = 0
 347 0000 10B5     		push	{r4, lr}
 348              		.cfi_def_cfa_offset 8
 349              		.cfi_offset 4, -8
 350              		.cfi_offset 14, -4
 117:Generated_Source\PSoC5/PWM_SPO2.c ****                 ((uint8)(~PWM_SPO2_CTRL_CMPMODE1_MASK));
 351              		.loc 1 117 0
 352 0002 114A     		ldr	r2, .L40
 353 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 354 0006 03F0C003 		and	r3, r3, #192
 355              	.LVL8:
 119:Generated_Source\PSoC5/PWM_SPO2.c ****                                    PWM_SPO2_DEFAULT_COMPARE1_MODE;
 356              		.loc 1 119 0
 357 000a 43F00903 		orr	r3, r3, #9
 358              	.LVL9:
 359 000e 1370     		strb	r3, [r2]
 126:Generated_Source\PSoC5/PWM_SPO2.c ****         #else /* (PWM_SPO2_Resolution == 16)*/
 360              		.loc 1 126 0
 361 0010 0E4C     		ldr	r4, .L40+4
 362 0012 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 363 0014 43F00103 		orr	r3, r3, #1
 364 0018 2370     		strb	r3, [r4]
 133:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (!PWM_SPO2_UsingFixedFunction) */
 365              		.loc 1 133 0
 366 001a FF20     		movs	r0, #255
 367 001c FFF7FEFF 		bl	PWM_SPO2_WriteCounter
 368              	.LVL10:
 136:Generated_Source\PSoC5/PWM_SPO2.c **** 
 369              		.loc 1 136 0
 370 0020 FF20     		movs	r0, #255
 371 0022 FFF7FEFF 		bl	PWM_SPO2_WritePeriod
 372              	.LVL11:
 139:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 373              		.loc 1 139 0
 374 0026 0020     		movs	r0, #0
 375 0028 FFF7FEFF 		bl	PWM_SPO2_WriteCompare
 376              	.LVL12:
 154:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UseStatus || PWM_SPO2_UsingFixedFunction) */
 377              		.loc 1 154 0
 378 002c 0020     		movs	r0, #0
 379 002e FFF7FEFF 		bl	PWM_SPO2_SetInterruptMode
 380              	.LVL13:
 167:Generated_Source\PSoC5/PWM_SPO2.c ****             /* Use the interrupt output of the status register for IRQ output */
 381              		.loc 1 167 0
 382 0032 FFF7FEFF 		bl	CyEnterCriticalSection
 383              	.LVL14:
 169:Generated_Source\PSoC5/PWM_SPO2.c **** 
 384              		.loc 1 169 0
 385 0036 2378     		ldrb	r3, [r4]	@ zero_extendqisi2
 386 0038 43F01003 		orr	r3, r3, #16
 387 003c 2370     		strb	r3, [r4]
 172:Generated_Source\PSoC5/PWM_SPO2.c **** 
 388              		.loc 1 172 0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 22


 389 003e FFF7FEFF 		bl	CyExitCriticalSection
 390              	.LVL15:
 176:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UseStatus) */
 391              		.loc 1 176 0
 392 0042 FFF7FEFF 		bl	PWM_SPO2_ClearFIFO
 393              	.LVL16:
 394 0046 10BD     		pop	{r4, pc}
 395              	.L41:
 396              		.align	2
 397              	.L40:
 398 0048 78640040 		.word	1073767544
 399 004c 98640040 		.word	1073767576
 400              		.cfi_endproc
 401              	.LFE1:
 402              		.size	PWM_SPO2_Init, .-PWM_SPO2_Init
 403              		.section	.text.PWM_SPO2_Start,"ax",%progbits
 404              		.align	2
 405              		.global	PWM_SPO2_Start
 406              		.thumb
 407              		.thumb_func
 408              		.type	PWM_SPO2_Start, %function
 409              	PWM_SPO2_Start:
 410              	.LFB0:
  56:Generated_Source\PSoC5/PWM_SPO2.c ****     /* If not Initialized then initialize all required hardware and software */
 411              		.loc 1 56 0
 412              		.cfi_startproc
 413              		@ args = 0, pretend = 0, frame = 0
 414              		@ frame_needed = 0, uses_anonymous_args = 0
 415 0000 08B5     		push	{r3, lr}
 416              		.cfi_def_cfa_offset 8
 417              		.cfi_offset 3, -8
 418              		.cfi_offset 14, -4
  58:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 419              		.loc 1 58 0
 420 0002 074B     		ldr	r3, .L45
 421 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 422 0006 23B9     		cbnz	r3, .L43
  60:Generated_Source\PSoC5/PWM_SPO2.c ****         PWM_SPO2_initVar = 1u;
 423              		.loc 1 60 0
 424 0008 FFF7FEFF 		bl	PWM_SPO2_Init
 425              	.LVL17:
  61:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 426              		.loc 1 61 0
 427 000c 0122     		movs	r2, #1
 428 000e 044B     		ldr	r3, .L45
 429 0010 1A70     		strb	r2, [r3]
 430              	.L43:
  63:Generated_Source\PSoC5/PWM_SPO2.c ****     PWM_SPO2_WriteCompare(0);
 431              		.loc 1 63 0
 432 0012 FFF7FEFF 		bl	PWM_SPO2_Enable
 433              	.LVL18:
  64:Generated_Source\PSoC5/PWM_SPO2.c **** }
 434              		.loc 1 64 0
 435 0016 0020     		movs	r0, #0
 436 0018 FFF7FEFF 		bl	PWM_SPO2_WriteCompare
 437              	.LVL19:
 438 001c 08BD     		pop	{r3, pc}
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 23


 439              	.L46:
 440 001e 00BF     		.align	2
 441              	.L45:
 442 0020 00000000 		.word	.LANCHOR0
 443              		.cfi_endproc
 444              	.LFE0:
 445              		.size	PWM_SPO2_Start, .-PWM_SPO2_Start
 446              		.section	.text.PWM_SPO2_ReadCompare,"ax",%progbits
 447              		.align	2
 448              		.global	PWM_SPO2_ReadCompare
 449              		.thumb
 450              		.thumb_func
 451              		.type	PWM_SPO2_ReadCompare, %function
 452              	PWM_SPO2_ReadCompare:
 453              	.LFB14:
 794:Generated_Source\PSoC5/PWM_SPO2.c **** 
 795:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* (!PWM_SPO2_UsingFixedFunction) */
 796:Generated_Source\PSoC5/PWM_SPO2.c **** 
 797:Generated_Source\PSoC5/PWM_SPO2.c **** 
 798:Generated_Source\PSoC5/PWM_SPO2.c **** #if (PWM_SPO2_UseOneCompareMode)
 799:Generated_Source\PSoC5/PWM_SPO2.c **** 
 800:Generated_Source\PSoC5/PWM_SPO2.c **** 
 801:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 802:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_ReadCompare
 803:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 804:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 805:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 806:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Reads the compare value for the compare output when the PWM Mode parameter is
 807:Generated_Source\PSoC5/PWM_SPO2.c ****     *  set to Dither mode, Center Aligned mode, or One Output mode.
 808:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 809:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 810:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 811:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 812:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 813:Generated_Source\PSoC5/PWM_SPO2.c ****     *  uint8/uint16: Current compare value
 814:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 815:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 816:Generated_Source\PSoC5/PWM_SPO2.c ****     uint8 PWM_SPO2_ReadCompare(void) 
 817:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 454              		.loc 1 817 0
 455              		.cfi_startproc
 456              		@ args = 0, pretend = 0, frame = 0
 457              		@ frame_needed = 0, uses_anonymous_args = 0
 458              		@ link register save eliminated.
 818:Generated_Source\PSoC5/PWM_SPO2.c ****         #if(PWM_SPO2_UsingFixedFunction)
 819:Generated_Source\PSoC5/PWM_SPO2.c ****             return ((uint8)CY_GET_REG16(PWM_SPO2_COMPARE1_LSB_PTR));
 820:Generated_Source\PSoC5/PWM_SPO2.c ****         #else
 821:Generated_Source\PSoC5/PWM_SPO2.c ****             return (CY_GET_REG8(PWM_SPO2_COMPARE1_LSB_PTR));
 459              		.loc 1 821 0
 460 0000 014B     		ldr	r3, .L48
 461 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 822:Generated_Source\PSoC5/PWM_SPO2.c ****         #endif /* (PWM_SPO2_UsingFixedFunction) */
 823:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 462              		.loc 1 823 0
 463 0004 7047     		bx	lr
 464              	.L49:
 465 0006 00BF     		.align	2
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 24


 466              	.L48:
 467 0008 28640040 		.word	1073767464
 468              		.cfi_endproc
 469              	.LFE14:
 470              		.size	PWM_SPO2_ReadCompare, .-PWM_SPO2_ReadCompare
 471              		.section	.text.PWM_SPO2_ReadPeriod,"ax",%progbits
 472              		.align	2
 473              		.global	PWM_SPO2_ReadPeriod
 474              		.thumb
 475              		.thumb_func
 476              		.type	PWM_SPO2_ReadPeriod, %function
 477              	PWM_SPO2_ReadPeriod:
 478              	.LFB15:
 824:Generated_Source\PSoC5/PWM_SPO2.c **** 
 825:Generated_Source\PSoC5/PWM_SPO2.c **** #else
 826:Generated_Source\PSoC5/PWM_SPO2.c **** 
 827:Generated_Source\PSoC5/PWM_SPO2.c **** 
 828:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 829:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_ReadCompare1
 830:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 831:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 832:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 833:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Reads the compare value for the compare1 output.
 834:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 835:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 836:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 837:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 838:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 839:Generated_Source\PSoC5/PWM_SPO2.c ****     *  uint8/uint16: Current compare value.
 840:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 841:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 842:Generated_Source\PSoC5/PWM_SPO2.c ****     uint8 PWM_SPO2_ReadCompare1(void) 
 843:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 844:Generated_Source\PSoC5/PWM_SPO2.c ****         return (CY_GET_REG8(PWM_SPO2_COMPARE1_LSB_PTR));
 845:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 846:Generated_Source\PSoC5/PWM_SPO2.c **** 
 847:Generated_Source\PSoC5/PWM_SPO2.c **** 
 848:Generated_Source\PSoC5/PWM_SPO2.c ****     /*******************************************************************************
 849:Generated_Source\PSoC5/PWM_SPO2.c ****     * Function Name: PWM_SPO2_ReadCompare2
 850:Generated_Source\PSoC5/PWM_SPO2.c ****     ********************************************************************************
 851:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 852:Generated_Source\PSoC5/PWM_SPO2.c ****     * Summary:
 853:Generated_Source\PSoC5/PWM_SPO2.c ****     *  Reads the compare value for the compare2 output.
 854:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 855:Generated_Source\PSoC5/PWM_SPO2.c ****     * Parameters:
 856:Generated_Source\PSoC5/PWM_SPO2.c ****     *  None
 857:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 858:Generated_Source\PSoC5/PWM_SPO2.c ****     * Return:
 859:Generated_Source\PSoC5/PWM_SPO2.c ****     *  uint8/uint16: Current compare value.
 860:Generated_Source\PSoC5/PWM_SPO2.c ****     *
 861:Generated_Source\PSoC5/PWM_SPO2.c ****     *******************************************************************************/
 862:Generated_Source\PSoC5/PWM_SPO2.c ****     uint8 PWM_SPO2_ReadCompare2(void) 
 863:Generated_Source\PSoC5/PWM_SPO2.c ****     {
 864:Generated_Source\PSoC5/PWM_SPO2.c ****         return (CY_GET_REG8(PWM_SPO2_COMPARE2_LSB_PTR));
 865:Generated_Source\PSoC5/PWM_SPO2.c ****     }
 866:Generated_Source\PSoC5/PWM_SPO2.c **** 
 867:Generated_Source\PSoC5/PWM_SPO2.c **** #endif /* (PWM_SPO2_UseOneCompareMode) */
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 25


 868:Generated_Source\PSoC5/PWM_SPO2.c **** 
 869:Generated_Source\PSoC5/PWM_SPO2.c **** 
 870:Generated_Source\PSoC5/PWM_SPO2.c **** /*******************************************************************************
 871:Generated_Source\PSoC5/PWM_SPO2.c **** * Function Name: PWM_SPO2_ReadPeriod
 872:Generated_Source\PSoC5/PWM_SPO2.c **** ********************************************************************************
 873:Generated_Source\PSoC5/PWM_SPO2.c **** *
 874:Generated_Source\PSoC5/PWM_SPO2.c **** * Summary:
 875:Generated_Source\PSoC5/PWM_SPO2.c **** *  Reads the period value used by the PWM hardware.
 876:Generated_Source\PSoC5/PWM_SPO2.c **** *
 877:Generated_Source\PSoC5/PWM_SPO2.c **** * Parameters:
 878:Generated_Source\PSoC5/PWM_SPO2.c **** *  None
 879:Generated_Source\PSoC5/PWM_SPO2.c **** *
 880:Generated_Source\PSoC5/PWM_SPO2.c **** * Return:
 881:Generated_Source\PSoC5/PWM_SPO2.c **** *  uint8/16: Period value
 882:Generated_Source\PSoC5/PWM_SPO2.c **** *
 883:Generated_Source\PSoC5/PWM_SPO2.c **** *******************************************************************************/
 884:Generated_Source\PSoC5/PWM_SPO2.c **** uint8 PWM_SPO2_ReadPeriod(void) 
 885:Generated_Source\PSoC5/PWM_SPO2.c **** {
 479              		.loc 1 885 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              		@ link register save eliminated.
 886:Generated_Source\PSoC5/PWM_SPO2.c ****     #if(PWM_SPO2_UsingFixedFunction)
 887:Generated_Source\PSoC5/PWM_SPO2.c ****         return ((uint8)CY_GET_REG16(PWM_SPO2_PERIOD_LSB_PTR));
 888:Generated_Source\PSoC5/PWM_SPO2.c ****     #else
 889:Generated_Source\PSoC5/PWM_SPO2.c ****         return (CY_GET_REG8(PWM_SPO2_PERIOD_LSB_PTR));
 484              		.loc 1 889 0
 485 0000 014B     		ldr	r3, .L51
 486 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 890:Generated_Source\PSoC5/PWM_SPO2.c ****     #endif /* (PWM_SPO2_UsingFixedFunction) */
 891:Generated_Source\PSoC5/PWM_SPO2.c **** }
 487              		.loc 1 891 0
 488 0004 7047     		bx	lr
 489              	.L52:
 490 0006 00BF     		.align	2
 491              	.L51:
 492 0008 48640040 		.word	1073767496
 493              		.cfi_endproc
 494              	.LFE15:
 495              		.size	PWM_SPO2_ReadPeriod, .-PWM_SPO2_ReadPeriod
 496              		.global	PWM_SPO2_initVar
 497              		.bss
 498              		.set	.LANCHOR0,. + 0
 499              		.type	PWM_SPO2_initVar, %object
 500              		.size	PWM_SPO2_initVar, 1
 501              	PWM_SPO2_initVar:
 502 0000 00       		.space	1
 503              		.text
 504              	.Letext0:
 505              		.file 2 "Generated_Source\\PSoC5\\cytypes.h"
 506              		.file 3 "Generated_Source\\PSoC5\\CyLib.h"
 507              		.section	.debug_info,"",%progbits
 508              	.Ldebug_info0:
 509 0000 3E030000 		.4byte	0x33e
 510 0004 0400     		.2byte	0x4
 511 0006 00000000 		.4byte	.Ldebug_abbrev0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 26


 512 000a 04       		.byte	0x4
 513 000b 01       		.uleb128 0x1
 514 000c C2000000 		.4byte	.LASF41
 515 0010 0C       		.byte	0xc
 516 0011 63010000 		.4byte	.LASF42
 517 0015 E9010000 		.4byte	.LASF43
 518 0019 00000000 		.4byte	.Ldebug_ranges0+0
 519 001d 00000000 		.4byte	0
 520 0021 00000000 		.4byte	.Ldebug_line0
 521 0025 02       		.uleb128 0x2
 522 0026 01       		.byte	0x1
 523 0027 06       		.byte	0x6
 524 0028 4B030000 		.4byte	.LASF0
 525 002c 02       		.uleb128 0x2
 526 002d 01       		.byte	0x1
 527 002e 08       		.byte	0x8
 528 002f B4000000 		.4byte	.LASF1
 529 0033 02       		.uleb128 0x2
 530 0034 02       		.byte	0x2
 531 0035 05       		.byte	0x5
 532 0036 EF020000 		.4byte	.LASF2
 533 003a 02       		.uleb128 0x2
 534 003b 02       		.byte	0x2
 535 003c 07       		.byte	0x7
 536 003d C0020000 		.4byte	.LASF3
 537 0041 02       		.uleb128 0x2
 538 0042 04       		.byte	0x4
 539 0043 05       		.byte	0x5
 540 0044 20030000 		.4byte	.LASF4
 541 0048 02       		.uleb128 0x2
 542 0049 04       		.byte	0x4
 543 004a 07       		.byte	0x7
 544 004b 85010000 		.4byte	.LASF5
 545 004f 02       		.uleb128 0x2
 546 0050 08       		.byte	0x8
 547 0051 05       		.byte	0x5
 548 0052 D3020000 		.4byte	.LASF6
 549 0056 02       		.uleb128 0x2
 550 0057 08       		.byte	0x8
 551 0058 07       		.byte	0x7
 552 0059 5A020000 		.4byte	.LASF7
 553 005d 03       		.uleb128 0x3
 554 005e 04       		.byte	0x4
 555 005f 05       		.byte	0x5
 556 0060 696E7400 		.ascii	"int\000"
 557 0064 02       		.uleb128 0x2
 558 0065 04       		.byte	0x4
 559 0066 07       		.byte	0x7
 560 0067 30020000 		.4byte	.LASF8
 561 006b 04       		.uleb128 0x4
 562 006c 97010000 		.4byte	.LASF12
 563 0070 02       		.byte	0x2
 564 0071 E401     		.2byte	0x1e4
 565 0073 2C000000 		.4byte	0x2c
 566 0077 02       		.uleb128 0x2
 567 0078 04       		.byte	0x4
 568 0079 04       		.byte	0x4
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 27


 569 007a 94000000 		.4byte	.LASF9
 570 007e 02       		.uleb128 0x2
 571 007f 08       		.byte	0x8
 572 0080 04       		.byte	0x4
 573 0081 AD010000 		.4byte	.LASF10
 574 0085 02       		.uleb128 0x2
 575 0086 01       		.byte	0x1
 576 0087 08       		.byte	0x8
 577 0088 00000000 		.4byte	.LASF11
 578 008c 04       		.uleb128 0x4
 579 008d 50010000 		.4byte	.LASF13
 580 0091 02       		.byte	0x2
 581 0092 8E02     		.2byte	0x28e
 582 0094 98000000 		.4byte	0x98
 583 0098 05       		.uleb128 0x5
 584 0099 6B000000 		.4byte	0x6b
 585 009d 02       		.uleb128 0x2
 586 009e 08       		.byte	0x8
 587 009f 04       		.byte	0x4
 588 00a0 3F030000 		.4byte	.LASF14
 589 00a4 02       		.uleb128 0x2
 590 00a5 04       		.byte	0x4
 591 00a6 07       		.byte	0x7
 592 00a7 B7020000 		.4byte	.LASF15
 593 00ab 06       		.uleb128 0x6
 594 00ac 86020000 		.4byte	.LASF16
 595 00b0 01       		.byte	0x1
 596 00b1 C7       		.byte	0xc7
 597 00b2 00000000 		.4byte	.LFB2
 598 00b6 10000000 		.4byte	.LFE2-.LFB2
 599 00ba 01       		.uleb128 0x1
 600 00bb 9C       		.byte	0x9c
 601 00bc 06       		.uleb128 0x6
 602 00bd 1D000000 		.4byte	.LASF17
 603 00c1 01       		.byte	0x1
 604 00c2 E9       		.byte	0xe9
 605 00c3 00000000 		.4byte	.LFB3
 606 00c7 10000000 		.4byte	.LFE3-.LFB3
 607 00cb 01       		.uleb128 0x1
 608 00cc 9C       		.byte	0x9c
 609 00cd 07       		.uleb128 0x7
 610 00ce 7E000000 		.4byte	.LASF18
 611 00d2 01       		.byte	0x1
 612 00d3 9301     		.2byte	0x193
 613 00d5 00000000 		.4byte	.LFB4
 614 00d9 0C000000 		.4byte	.LFE4-.LFB4
 615 00dd 01       		.uleb128 0x1
 616 00de 9C       		.byte	0x9c
 617 00df F2000000 		.4byte	0xf2
 618 00e3 08       		.uleb128 0x8
 619 00e4 A5010000 		.4byte	.LASF20
 620 00e8 01       		.byte	0x1
 621 00e9 9301     		.2byte	0x193
 622 00eb 6B000000 		.4byte	0x6b
 623 00ef 01       		.uleb128 0x1
 624 00f0 50       		.byte	0x50
 625 00f1 00       		.byte	0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 28


 626 00f2 09       		.uleb128 0x9
 627 00f3 2B000000 		.4byte	.LASF26
 628 00f7 01       		.byte	0x1
 629 00f8 A901     		.2byte	0x1a9
 630 00fa 6B000000 		.4byte	0x6b
 631 00fe 00000000 		.4byte	.LFB5
 632 0102 14000000 		.4byte	.LFE5-.LFB5
 633 0106 01       		.uleb128 0x1
 634 0107 9C       		.byte	0x9c
 635 0108 07       		.uleb128 0x7
 636 0109 47000000 		.4byte	.LASF19
 637 010d 01       		.byte	0x1
 638 010e E201     		.2byte	0x1e2
 639 0110 00000000 		.4byte	.LFB7
 640 0114 0C000000 		.4byte	.LFE7-.LFB7
 641 0118 01       		.uleb128 0x1
 642 0119 9C       		.byte	0x9c
 643 011a 2D010000 		.4byte	0x12d
 644 011e 08       		.uleb128 0x8
 645 011f 40000000 		.4byte	.LASF21
 646 0123 01       		.byte	0x1
 647 0124 E201     		.2byte	0x1e2
 648 0126 6B000000 		.4byte	0x6b
 649 012a 01       		.uleb128 0x1
 650 012b 50       		.byte	0x50
 651 012c 00       		.byte	0
 652 012d 07       		.uleb128 0x7
 653 012e 29030000 		.4byte	.LASF22
 654 0132 01       		.byte	0x1
 655 0133 0402     		.2byte	0x204
 656 0135 00000000 		.4byte	.LFB8
 657 0139 0C000000 		.4byte	.LFE8-.LFB8
 658 013d 01       		.uleb128 0x1
 659 013e 9C       		.byte	0x9c
 660 013f 52010000 		.4byte	0x152
 661 0143 08       		.uleb128 0x8
 662 0144 57030000 		.4byte	.LASF23
 663 0148 01       		.byte	0x1
 664 0149 0402     		.2byte	0x204
 665 014b 6B000000 		.4byte	0x6b
 666 014f 01       		.uleb128 0x1
 667 0150 50       		.byte	0x50
 668 0151 00       		.byte	0
 669 0152 07       		.uleb128 0x7
 670 0153 9A000000 		.4byte	.LASF24
 671 0157 01       		.byte	0x1
 672 0158 AC02     		.2byte	0x2ac
 673 015a 00000000 		.4byte	.LFB9
 674 015e 0C000000 		.4byte	.LFE9-.LFB9
 675 0162 01       		.uleb128 0x1
 676 0163 9C       		.byte	0x9c
 677 0164 77010000 		.4byte	0x177
 678 0168 08       		.uleb128 0x8
 679 0169 E1020000 		.4byte	.LASF25
 680 016d 01       		.byte	0x1
 681 016e AC02     		.2byte	0x2ac
 682 0170 6B000000 		.4byte	0x6b
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 29


 683 0174 01       		.uleb128 0x1
 684 0175 50       		.byte	0x50
 685 0176 00       		.byte	0
 686 0177 09       		.uleb128 0x9
 687 0178 5F030000 		.4byte	.LASF27
 688 017c 01       		.byte	0x1
 689 017d C702     		.2byte	0x2c7
 690 017f 6B000000 		.4byte	0x6b
 691 0183 00000000 		.4byte	.LFB10
 692 0187 0C000000 		.4byte	.LFE10-.LFB10
 693 018b 01       		.uleb128 0x1
 694 018c 9C       		.byte	0x9c
 695 018d 0A       		.uleb128 0xa
 696 018e 3D020000 		.4byte	.LASF44
 697 0192 01       		.byte	0x1
 698 0193 E102     		.2byte	0x2e1
 699 0195 6B000000 		.4byte	0x6b
 700 0199 00000000 		.4byte	.LFB11
 701 019d 0C000000 		.4byte	.LFE11-.LFB11
 702 01a1 01       		.uleb128 0x1
 703 01a2 9C       		.byte	0x9c
 704 01a3 B6010000 		.4byte	0x1b6
 705 01a7 0B       		.uleb128 0xb
 706 01a8 96020000 		.4byte	.LASF33
 707 01ac 01       		.byte	0x1
 708 01ad E302     		.2byte	0x2e3
 709 01af 6B000000 		.4byte	0x6b
 710 01b3 01       		.uleb128 0x1
 711 01b4 50       		.byte	0x50
 712 01b5 00       		.byte	0
 713 01b6 07       		.uleb128 0x7
 714 01b7 B4010000 		.4byte	.LASF28
 715 01bb 01       		.byte	0x1
 716 01bc FD02     		.2byte	0x2fd
 717 01be 00000000 		.4byte	.LFB12
 718 01c2 0C000000 		.4byte	.LFE12-.LFB12
 719 01c6 01       		.uleb128 0x1
 720 01c7 9C       		.byte	0x9c
 721 01c8 DB010000 		.4byte	0x1db
 722 01cc 08       		.uleb128 0x8
 723 01cd 9D010000 		.4byte	.LASF29
 724 01d1 01       		.byte	0x1
 725 01d2 FD02     		.2byte	0x2fd
 726 01d4 6B000000 		.4byte	0x6b
 727 01d8 01       		.uleb128 0x1
 728 01d9 50       		.byte	0x50
 729 01da 00       		.byte	0
 730 01db 09       		.uleb128 0x9
 731 01dc 9D020000 		.4byte	.LASF30
 732 01e0 01       		.byte	0x1
 733 01e1 1603     		.2byte	0x316
 734 01e3 6B000000 		.4byte	0x6b
 735 01e7 00000000 		.4byte	.LFB13
 736 01eb 0C000000 		.4byte	.LFE13-.LFB13
 737 01ef 01       		.uleb128 0x1
 738 01f0 9C       		.byte	0x9c
 739 01f1 07       		.uleb128 0x7
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 30


 740 01f2 5C000000 		.4byte	.LASF31
 741 01f6 01       		.byte	0x1
 742 01f7 C501     		.2byte	0x1c5
 743 01f9 00000000 		.4byte	.LFB6
 744 01fd 14000000 		.4byte	.LFE6-.LFB6
 745 0201 01       		.uleb128 0x1
 746 0202 9C       		.byte	0x9c
 747 0203 1A020000 		.4byte	0x21a
 748 0207 0C       		.uleb128 0xc
 749 0208 08000000 		.4byte	.LVL6
 750 020c DB010000 		.4byte	0x1db
 751 0210 0C       		.uleb128 0xc
 752 0211 0C000000 		.4byte	.LVL7
 753 0215 77010000 		.4byte	0x177
 754 0219 00       		.byte	0
 755 021a 0D       		.uleb128 0xd
 756 021b 55010000 		.4byte	.LASF32
 757 021f 01       		.byte	0x1
 758 0220 54       		.byte	0x54
 759 0221 00000000 		.4byte	.LFB1
 760 0225 50000000 		.4byte	.LFE1-.LFB1
 761 0229 01       		.uleb128 0x1
 762 022a 9C       		.byte	0x9c
 763 022b B7020000 		.4byte	0x2b7
 764 022f 0E       		.uleb128 0xe
 765 0230 B2020000 		.4byte	.LASF34
 766 0234 01       		.byte	0x1
 767 0235 57       		.byte	0x57
 768 0236 6B000000 		.4byte	0x6b
 769 023a 00000000 		.4byte	.LLST0
 770 023e 0E       		.uleb128 0xe
 771 023f 05000000 		.4byte	.LASF35
 772 0243 01       		.byte	0x1
 773 0244 5D       		.byte	0x5d
 774 0245 6B000000 		.4byte	0x6b
 775 0249 13000000 		.4byte	.LLST1
 776 024d 0F       		.uleb128 0xf
 777 024e 20000000 		.4byte	.LVL10
 778 0252 CD000000 		.4byte	0xcd
 779 0256 61020000 		.4byte	0x261
 780 025a 10       		.uleb128 0x10
 781 025b 01       		.uleb128 0x1
 782 025c 50       		.byte	0x50
 783 025d 02       		.uleb128 0x2
 784 025e 09       		.byte	0x9
 785 025f FF       		.byte	0xff
 786 0260 00       		.byte	0
 787 0261 0F       		.uleb128 0xf
 788 0262 26000000 		.4byte	.LVL11
 789 0266 08010000 		.4byte	0x108
 790 026a 75020000 		.4byte	0x275
 791 026e 10       		.uleb128 0x10
 792 026f 01       		.uleb128 0x1
 793 0270 50       		.byte	0x50
 794 0271 02       		.uleb128 0x2
 795 0272 09       		.byte	0x9
 796 0273 FF       		.byte	0xff
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 31


 797 0274 00       		.byte	0
 798 0275 0F       		.uleb128 0xf
 799 0276 2C000000 		.4byte	.LVL12
 800 027a 2D010000 		.4byte	0x12d
 801 027e 88020000 		.4byte	0x288
 802 0282 10       		.uleb128 0x10
 803 0283 01       		.uleb128 0x1
 804 0284 50       		.byte	0x50
 805 0285 01       		.uleb128 0x1
 806 0286 30       		.byte	0x30
 807 0287 00       		.byte	0
 808 0288 0F       		.uleb128 0xf
 809 0289 32000000 		.4byte	.LVL13
 810 028d 52010000 		.4byte	0x152
 811 0291 9B020000 		.4byte	0x29b
 812 0295 10       		.uleb128 0x10
 813 0296 01       		.uleb128 0x1
 814 0297 50       		.byte	0x50
 815 0298 01       		.uleb128 0x1
 816 0299 30       		.byte	0x30
 817 029a 00       		.byte	0
 818 029b 0C       		.uleb128 0xc
 819 029c 36000000 		.4byte	.LVL14
 820 02a0 2B030000 		.4byte	0x32b
 821 02a4 0C       		.uleb128 0xc
 822 02a5 42000000 		.4byte	.LVL15
 823 02a9 36030000 		.4byte	0x336
 824 02ad 0C       		.uleb128 0xc
 825 02ae 46000000 		.4byte	.LVL16
 826 02b2 F1010000 		.4byte	0x1f1
 827 02b6 00       		.byte	0
 828 02b7 0D       		.uleb128 0xd
 829 02b8 6F000000 		.4byte	.LASF36
 830 02bc 01       		.byte	0x1
 831 02bd 37       		.byte	0x37
 832 02be 00000000 		.4byte	.LFB0
 833 02c2 24000000 		.4byte	.LFE0-.LFB0
 834 02c6 01       		.uleb128 0x1
 835 02c7 9C       		.byte	0x9c
 836 02c8 EE020000 		.4byte	0x2ee
 837 02cc 0C       		.uleb128 0xc
 838 02cd 0C000000 		.4byte	.LVL17
 839 02d1 1A020000 		.4byte	0x21a
 840 02d5 0C       		.uleb128 0xc
 841 02d6 16000000 		.4byte	.LVL18
 842 02da AB000000 		.4byte	0xab
 843 02de 11       		.uleb128 0x11
 844 02df 1C000000 		.4byte	.LVL19
 845 02e3 2D010000 		.4byte	0x12d
 846 02e7 10       		.uleb128 0x10
 847 02e8 01       		.uleb128 0x1
 848 02e9 50       		.byte	0x50
 849 02ea 01       		.uleb128 0x1
 850 02eb 30       		.byte	0x30
 851 02ec 00       		.byte	0
 852 02ed 00       		.byte	0
 853 02ee 09       		.uleb128 0x9
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 32


 854 02ef 71020000 		.4byte	.LASF37
 855 02f3 01       		.byte	0x1
 856 02f4 3003     		.2byte	0x330
 857 02f6 6B000000 		.4byte	0x6b
 858 02fa 00000000 		.4byte	.LFB14
 859 02fe 0C000000 		.4byte	.LFE14-.LFB14
 860 0302 01       		.uleb128 0x1
 861 0303 9C       		.byte	0x9c
 862 0304 09       		.uleb128 0x9
 863 0305 7B030000 		.4byte	.LASF38
 864 0309 01       		.byte	0x1
 865 030a 7403     		.2byte	0x374
 866 030c 6B000000 		.4byte	0x6b
 867 0310 00000000 		.4byte	.LFB15
 868 0314 0C000000 		.4byte	.LFE15-.LFB15
 869 0318 01       		.uleb128 0x1
 870 0319 9C       		.byte	0x9c
 871 031a 12       		.uleb128 0x12
 872 031b F9020000 		.4byte	.LASF45
 873 031f 01       		.byte	0x1
 874 0320 20       		.byte	0x20
 875 0321 6B000000 		.4byte	0x6b
 876 0325 05       		.uleb128 0x5
 877 0326 03       		.byte	0x3
 878 0327 00000000 		.4byte	PWM_SPO2_initVar
 879 032b 13       		.uleb128 0x13
 880 032c D2010000 		.4byte	.LASF39
 881 0330 D2010000 		.4byte	.LASF39
 882 0334 03       		.byte	0x3
 883 0335 7D       		.byte	0x7d
 884 0336 13       		.uleb128 0x13
 885 0337 0A030000 		.4byte	.LASF40
 886 033b 0A030000 		.4byte	.LASF40
 887 033f 03       		.byte	0x3
 888 0340 7E       		.byte	0x7e
 889 0341 00       		.byte	0
 890              		.section	.debug_abbrev,"",%progbits
 891              	.Ldebug_abbrev0:
 892 0000 01       		.uleb128 0x1
 893 0001 11       		.uleb128 0x11
 894 0002 01       		.byte	0x1
 895 0003 25       		.uleb128 0x25
 896 0004 0E       		.uleb128 0xe
 897 0005 13       		.uleb128 0x13
 898 0006 0B       		.uleb128 0xb
 899 0007 03       		.uleb128 0x3
 900 0008 0E       		.uleb128 0xe
 901 0009 1B       		.uleb128 0x1b
 902 000a 0E       		.uleb128 0xe
 903 000b 55       		.uleb128 0x55
 904 000c 17       		.uleb128 0x17
 905 000d 11       		.uleb128 0x11
 906 000e 01       		.uleb128 0x1
 907 000f 10       		.uleb128 0x10
 908 0010 17       		.uleb128 0x17
 909 0011 00       		.byte	0
 910 0012 00       		.byte	0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 33


 911 0013 02       		.uleb128 0x2
 912 0014 24       		.uleb128 0x24
 913 0015 00       		.byte	0
 914 0016 0B       		.uleb128 0xb
 915 0017 0B       		.uleb128 0xb
 916 0018 3E       		.uleb128 0x3e
 917 0019 0B       		.uleb128 0xb
 918 001a 03       		.uleb128 0x3
 919 001b 0E       		.uleb128 0xe
 920 001c 00       		.byte	0
 921 001d 00       		.byte	0
 922 001e 03       		.uleb128 0x3
 923 001f 24       		.uleb128 0x24
 924 0020 00       		.byte	0
 925 0021 0B       		.uleb128 0xb
 926 0022 0B       		.uleb128 0xb
 927 0023 3E       		.uleb128 0x3e
 928 0024 0B       		.uleb128 0xb
 929 0025 03       		.uleb128 0x3
 930 0026 08       		.uleb128 0x8
 931 0027 00       		.byte	0
 932 0028 00       		.byte	0
 933 0029 04       		.uleb128 0x4
 934 002a 16       		.uleb128 0x16
 935 002b 00       		.byte	0
 936 002c 03       		.uleb128 0x3
 937 002d 0E       		.uleb128 0xe
 938 002e 3A       		.uleb128 0x3a
 939 002f 0B       		.uleb128 0xb
 940 0030 3B       		.uleb128 0x3b
 941 0031 05       		.uleb128 0x5
 942 0032 49       		.uleb128 0x49
 943 0033 13       		.uleb128 0x13
 944 0034 00       		.byte	0
 945 0035 00       		.byte	0
 946 0036 05       		.uleb128 0x5
 947 0037 35       		.uleb128 0x35
 948 0038 00       		.byte	0
 949 0039 49       		.uleb128 0x49
 950 003a 13       		.uleb128 0x13
 951 003b 00       		.byte	0
 952 003c 00       		.byte	0
 953 003d 06       		.uleb128 0x6
 954 003e 2E       		.uleb128 0x2e
 955 003f 00       		.byte	0
 956 0040 3F       		.uleb128 0x3f
 957 0041 19       		.uleb128 0x19
 958 0042 03       		.uleb128 0x3
 959 0043 0E       		.uleb128 0xe
 960 0044 3A       		.uleb128 0x3a
 961 0045 0B       		.uleb128 0xb
 962 0046 3B       		.uleb128 0x3b
 963 0047 0B       		.uleb128 0xb
 964 0048 27       		.uleb128 0x27
 965 0049 19       		.uleb128 0x19
 966 004a 11       		.uleb128 0x11
 967 004b 01       		.uleb128 0x1
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 34


 968 004c 12       		.uleb128 0x12
 969 004d 06       		.uleb128 0x6
 970 004e 40       		.uleb128 0x40
 971 004f 18       		.uleb128 0x18
 972 0050 9742     		.uleb128 0x2117
 973 0052 19       		.uleb128 0x19
 974 0053 00       		.byte	0
 975 0054 00       		.byte	0
 976 0055 07       		.uleb128 0x7
 977 0056 2E       		.uleb128 0x2e
 978 0057 01       		.byte	0x1
 979 0058 3F       		.uleb128 0x3f
 980 0059 19       		.uleb128 0x19
 981 005a 03       		.uleb128 0x3
 982 005b 0E       		.uleb128 0xe
 983 005c 3A       		.uleb128 0x3a
 984 005d 0B       		.uleb128 0xb
 985 005e 3B       		.uleb128 0x3b
 986 005f 05       		.uleb128 0x5
 987 0060 27       		.uleb128 0x27
 988 0061 19       		.uleb128 0x19
 989 0062 11       		.uleb128 0x11
 990 0063 01       		.uleb128 0x1
 991 0064 12       		.uleb128 0x12
 992 0065 06       		.uleb128 0x6
 993 0066 40       		.uleb128 0x40
 994 0067 18       		.uleb128 0x18
 995 0068 9742     		.uleb128 0x2117
 996 006a 19       		.uleb128 0x19
 997 006b 01       		.uleb128 0x1
 998 006c 13       		.uleb128 0x13
 999 006d 00       		.byte	0
 1000 006e 00       		.byte	0
 1001 006f 08       		.uleb128 0x8
 1002 0070 05       		.uleb128 0x5
 1003 0071 00       		.byte	0
 1004 0072 03       		.uleb128 0x3
 1005 0073 0E       		.uleb128 0xe
 1006 0074 3A       		.uleb128 0x3a
 1007 0075 0B       		.uleb128 0xb
 1008 0076 3B       		.uleb128 0x3b
 1009 0077 05       		.uleb128 0x5
 1010 0078 49       		.uleb128 0x49
 1011 0079 13       		.uleb128 0x13
 1012 007a 02       		.uleb128 0x2
 1013 007b 18       		.uleb128 0x18
 1014 007c 00       		.byte	0
 1015 007d 00       		.byte	0
 1016 007e 09       		.uleb128 0x9
 1017 007f 2E       		.uleb128 0x2e
 1018 0080 00       		.byte	0
 1019 0081 3F       		.uleb128 0x3f
 1020 0082 19       		.uleb128 0x19
 1021 0083 03       		.uleb128 0x3
 1022 0084 0E       		.uleb128 0xe
 1023 0085 3A       		.uleb128 0x3a
 1024 0086 0B       		.uleb128 0xb
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 35


 1025 0087 3B       		.uleb128 0x3b
 1026 0088 05       		.uleb128 0x5
 1027 0089 27       		.uleb128 0x27
 1028 008a 19       		.uleb128 0x19
 1029 008b 49       		.uleb128 0x49
 1030 008c 13       		.uleb128 0x13
 1031 008d 11       		.uleb128 0x11
 1032 008e 01       		.uleb128 0x1
 1033 008f 12       		.uleb128 0x12
 1034 0090 06       		.uleb128 0x6
 1035 0091 40       		.uleb128 0x40
 1036 0092 18       		.uleb128 0x18
 1037 0093 9742     		.uleb128 0x2117
 1038 0095 19       		.uleb128 0x19
 1039 0096 00       		.byte	0
 1040 0097 00       		.byte	0
 1041 0098 0A       		.uleb128 0xa
 1042 0099 2E       		.uleb128 0x2e
 1043 009a 01       		.byte	0x1
 1044 009b 3F       		.uleb128 0x3f
 1045 009c 19       		.uleb128 0x19
 1046 009d 03       		.uleb128 0x3
 1047 009e 0E       		.uleb128 0xe
 1048 009f 3A       		.uleb128 0x3a
 1049 00a0 0B       		.uleb128 0xb
 1050 00a1 3B       		.uleb128 0x3b
 1051 00a2 05       		.uleb128 0x5
 1052 00a3 27       		.uleb128 0x27
 1053 00a4 19       		.uleb128 0x19
 1054 00a5 49       		.uleb128 0x49
 1055 00a6 13       		.uleb128 0x13
 1056 00a7 11       		.uleb128 0x11
 1057 00a8 01       		.uleb128 0x1
 1058 00a9 12       		.uleb128 0x12
 1059 00aa 06       		.uleb128 0x6
 1060 00ab 40       		.uleb128 0x40
 1061 00ac 18       		.uleb128 0x18
 1062 00ad 9742     		.uleb128 0x2117
 1063 00af 19       		.uleb128 0x19
 1064 00b0 01       		.uleb128 0x1
 1065 00b1 13       		.uleb128 0x13
 1066 00b2 00       		.byte	0
 1067 00b3 00       		.byte	0
 1068 00b4 0B       		.uleb128 0xb
 1069 00b5 34       		.uleb128 0x34
 1070 00b6 00       		.byte	0
 1071 00b7 03       		.uleb128 0x3
 1072 00b8 0E       		.uleb128 0xe
 1073 00b9 3A       		.uleb128 0x3a
 1074 00ba 0B       		.uleb128 0xb
 1075 00bb 3B       		.uleb128 0x3b
 1076 00bc 05       		.uleb128 0x5
 1077 00bd 49       		.uleb128 0x49
 1078 00be 13       		.uleb128 0x13
 1079 00bf 02       		.uleb128 0x2
 1080 00c0 18       		.uleb128 0x18
 1081 00c1 00       		.byte	0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 36


 1082 00c2 00       		.byte	0
 1083 00c3 0C       		.uleb128 0xc
 1084 00c4 898201   		.uleb128 0x4109
 1085 00c7 00       		.byte	0
 1086 00c8 11       		.uleb128 0x11
 1087 00c9 01       		.uleb128 0x1
 1088 00ca 31       		.uleb128 0x31
 1089 00cb 13       		.uleb128 0x13
 1090 00cc 00       		.byte	0
 1091 00cd 00       		.byte	0
 1092 00ce 0D       		.uleb128 0xd
 1093 00cf 2E       		.uleb128 0x2e
 1094 00d0 01       		.byte	0x1
 1095 00d1 3F       		.uleb128 0x3f
 1096 00d2 19       		.uleb128 0x19
 1097 00d3 03       		.uleb128 0x3
 1098 00d4 0E       		.uleb128 0xe
 1099 00d5 3A       		.uleb128 0x3a
 1100 00d6 0B       		.uleb128 0xb
 1101 00d7 3B       		.uleb128 0x3b
 1102 00d8 0B       		.uleb128 0xb
 1103 00d9 27       		.uleb128 0x27
 1104 00da 19       		.uleb128 0x19
 1105 00db 11       		.uleb128 0x11
 1106 00dc 01       		.uleb128 0x1
 1107 00dd 12       		.uleb128 0x12
 1108 00de 06       		.uleb128 0x6
 1109 00df 40       		.uleb128 0x40
 1110 00e0 18       		.uleb128 0x18
 1111 00e1 9742     		.uleb128 0x2117
 1112 00e3 19       		.uleb128 0x19
 1113 00e4 01       		.uleb128 0x1
 1114 00e5 13       		.uleb128 0x13
 1115 00e6 00       		.byte	0
 1116 00e7 00       		.byte	0
 1117 00e8 0E       		.uleb128 0xe
 1118 00e9 34       		.uleb128 0x34
 1119 00ea 00       		.byte	0
 1120 00eb 03       		.uleb128 0x3
 1121 00ec 0E       		.uleb128 0xe
 1122 00ed 3A       		.uleb128 0x3a
 1123 00ee 0B       		.uleb128 0xb
 1124 00ef 3B       		.uleb128 0x3b
 1125 00f0 0B       		.uleb128 0xb
 1126 00f1 49       		.uleb128 0x49
 1127 00f2 13       		.uleb128 0x13
 1128 00f3 02       		.uleb128 0x2
 1129 00f4 17       		.uleb128 0x17
 1130 00f5 00       		.byte	0
 1131 00f6 00       		.byte	0
 1132 00f7 0F       		.uleb128 0xf
 1133 00f8 898201   		.uleb128 0x4109
 1134 00fb 01       		.byte	0x1
 1135 00fc 11       		.uleb128 0x11
 1136 00fd 01       		.uleb128 0x1
 1137 00fe 31       		.uleb128 0x31
 1138 00ff 13       		.uleb128 0x13
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 37


 1139 0100 01       		.uleb128 0x1
 1140 0101 13       		.uleb128 0x13
 1141 0102 00       		.byte	0
 1142 0103 00       		.byte	0
 1143 0104 10       		.uleb128 0x10
 1144 0105 8A8201   		.uleb128 0x410a
 1145 0108 00       		.byte	0
 1146 0109 02       		.uleb128 0x2
 1147 010a 18       		.uleb128 0x18
 1148 010b 9142     		.uleb128 0x2111
 1149 010d 18       		.uleb128 0x18
 1150 010e 00       		.byte	0
 1151 010f 00       		.byte	0
 1152 0110 11       		.uleb128 0x11
 1153 0111 898201   		.uleb128 0x4109
 1154 0114 01       		.byte	0x1
 1155 0115 11       		.uleb128 0x11
 1156 0116 01       		.uleb128 0x1
 1157 0117 31       		.uleb128 0x31
 1158 0118 13       		.uleb128 0x13
 1159 0119 00       		.byte	0
 1160 011a 00       		.byte	0
 1161 011b 12       		.uleb128 0x12
 1162 011c 34       		.uleb128 0x34
 1163 011d 00       		.byte	0
 1164 011e 03       		.uleb128 0x3
 1165 011f 0E       		.uleb128 0xe
 1166 0120 3A       		.uleb128 0x3a
 1167 0121 0B       		.uleb128 0xb
 1168 0122 3B       		.uleb128 0x3b
 1169 0123 0B       		.uleb128 0xb
 1170 0124 49       		.uleb128 0x49
 1171 0125 13       		.uleb128 0x13
 1172 0126 3F       		.uleb128 0x3f
 1173 0127 19       		.uleb128 0x19
 1174 0128 02       		.uleb128 0x2
 1175 0129 18       		.uleb128 0x18
 1176 012a 00       		.byte	0
 1177 012b 00       		.byte	0
 1178 012c 13       		.uleb128 0x13
 1179 012d 2E       		.uleb128 0x2e
 1180 012e 00       		.byte	0
 1181 012f 3F       		.uleb128 0x3f
 1182 0130 19       		.uleb128 0x19
 1183 0131 3C       		.uleb128 0x3c
 1184 0132 19       		.uleb128 0x19
 1185 0133 6E       		.uleb128 0x6e
 1186 0134 0E       		.uleb128 0xe
 1187 0135 03       		.uleb128 0x3
 1188 0136 0E       		.uleb128 0xe
 1189 0137 3A       		.uleb128 0x3a
 1190 0138 0B       		.uleb128 0xb
 1191 0139 3B       		.uleb128 0x3b
 1192 013a 0B       		.uleb128 0xb
 1193 013b 00       		.byte	0
 1194 013c 00       		.byte	0
 1195 013d 00       		.byte	0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 38


 1196              		.section	.debug_loc,"",%progbits
 1197              	.Ldebug_loc0:
 1198              	.LLST0:
 1199 0000 0A000000 		.4byte	.LVL8
 1200 0004 0E000000 		.4byte	.LVL9
 1201 0008 0100     		.2byte	0x1
 1202 000a 53       		.byte	0x53
 1203 000b 00000000 		.4byte	0
 1204 000f 00000000 		.4byte	0
 1205              	.LLST1:
 1206 0013 36000000 		.4byte	.LVL14
 1207 0017 41000000 		.4byte	.LVL15-1
 1208 001b 0100     		.2byte	0x1
 1209 001d 50       		.byte	0x50
 1210 001e 00000000 		.4byte	0
 1211 0022 00000000 		.4byte	0
 1212              		.section	.debug_aranges,"",%progbits
 1213 0000 94000000 		.4byte	0x94
 1214 0004 0200     		.2byte	0x2
 1215 0006 00000000 		.4byte	.Ldebug_info0
 1216 000a 04       		.byte	0x4
 1217 000b 00       		.byte	0
 1218 000c 0000     		.2byte	0
 1219 000e 0000     		.2byte	0
 1220 0010 00000000 		.4byte	.LFB2
 1221 0014 10000000 		.4byte	.LFE2-.LFB2
 1222 0018 00000000 		.4byte	.LFB3
 1223 001c 10000000 		.4byte	.LFE3-.LFB3
 1224 0020 00000000 		.4byte	.LFB4
 1225 0024 0C000000 		.4byte	.LFE4-.LFB4
 1226 0028 00000000 		.4byte	.LFB5
 1227 002c 14000000 		.4byte	.LFE5-.LFB5
 1228 0030 00000000 		.4byte	.LFB7
 1229 0034 0C000000 		.4byte	.LFE7-.LFB7
 1230 0038 00000000 		.4byte	.LFB8
 1231 003c 0C000000 		.4byte	.LFE8-.LFB8
 1232 0040 00000000 		.4byte	.LFB9
 1233 0044 0C000000 		.4byte	.LFE9-.LFB9
 1234 0048 00000000 		.4byte	.LFB10
 1235 004c 0C000000 		.4byte	.LFE10-.LFB10
 1236 0050 00000000 		.4byte	.LFB11
 1237 0054 0C000000 		.4byte	.LFE11-.LFB11
 1238 0058 00000000 		.4byte	.LFB12
 1239 005c 0C000000 		.4byte	.LFE12-.LFB12
 1240 0060 00000000 		.4byte	.LFB13
 1241 0064 0C000000 		.4byte	.LFE13-.LFB13
 1242 0068 00000000 		.4byte	.LFB6
 1243 006c 14000000 		.4byte	.LFE6-.LFB6
 1244 0070 00000000 		.4byte	.LFB1
 1245 0074 50000000 		.4byte	.LFE1-.LFB1
 1246 0078 00000000 		.4byte	.LFB0
 1247 007c 24000000 		.4byte	.LFE0-.LFB0
 1248 0080 00000000 		.4byte	.LFB14
 1249 0084 0C000000 		.4byte	.LFE14-.LFB14
 1250 0088 00000000 		.4byte	.LFB15
 1251 008c 0C000000 		.4byte	.LFE15-.LFB15
 1252 0090 00000000 		.4byte	0
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 39


 1253 0094 00000000 		.4byte	0
 1254              		.section	.debug_ranges,"",%progbits
 1255              	.Ldebug_ranges0:
 1256 0000 00000000 		.4byte	.LFB2
 1257 0004 10000000 		.4byte	.LFE2
 1258 0008 00000000 		.4byte	.LFB3
 1259 000c 10000000 		.4byte	.LFE3
 1260 0010 00000000 		.4byte	.LFB4
 1261 0014 0C000000 		.4byte	.LFE4
 1262 0018 00000000 		.4byte	.LFB5
 1263 001c 14000000 		.4byte	.LFE5
 1264 0020 00000000 		.4byte	.LFB7
 1265 0024 0C000000 		.4byte	.LFE7
 1266 0028 00000000 		.4byte	.LFB8
 1267 002c 0C000000 		.4byte	.LFE8
 1268 0030 00000000 		.4byte	.LFB9
 1269 0034 0C000000 		.4byte	.LFE9
 1270 0038 00000000 		.4byte	.LFB10
 1271 003c 0C000000 		.4byte	.LFE10
 1272 0040 00000000 		.4byte	.LFB11
 1273 0044 0C000000 		.4byte	.LFE11
 1274 0048 00000000 		.4byte	.LFB12
 1275 004c 0C000000 		.4byte	.LFE12
 1276 0050 00000000 		.4byte	.LFB13
 1277 0054 0C000000 		.4byte	.LFE13
 1278 0058 00000000 		.4byte	.LFB6
 1279 005c 14000000 		.4byte	.LFE6
 1280 0060 00000000 		.4byte	.LFB1
 1281 0064 50000000 		.4byte	.LFE1
 1282 0068 00000000 		.4byte	.LFB0
 1283 006c 24000000 		.4byte	.LFE0
 1284 0070 00000000 		.4byte	.LFB14
 1285 0074 0C000000 		.4byte	.LFE14
 1286 0078 00000000 		.4byte	.LFB15
 1287 007c 0C000000 		.4byte	.LFE15
 1288 0080 00000000 		.4byte	0
 1289 0084 00000000 		.4byte	0
 1290              		.section	.debug_line,"",%progbits
 1291              	.Ldebug_line0:
 1292 0000 85010000 		.section	.debug_str,"MS",%progbits,1
 1292      02005000 
 1292      00000201 
 1292      FB0E0D00 
 1292      01010101 
 1293              	.LASF11:
 1294 0000 63686172 		.ascii	"char\000"
 1294      00
 1295              	.LASF35:
 1296 0005 50574D5F 		.ascii	"PWM_SPO2_interruptState\000"
 1296      53504F32 
 1296      5F696E74 
 1296      65727275 
 1296      70745374 
 1297              	.LASF17:
 1298 001d 50574D5F 		.ascii	"PWM_SPO2_Stop\000"
 1298      53504F32 
 1298      5F53746F 
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 40


 1298      7000
 1299              	.LASF26:
 1300 002b 50574D5F 		.ascii	"PWM_SPO2_ReadCounter\000"
 1300      53504F32 
 1300      5F526561 
 1300      64436F75 
 1300      6E746572 
 1301              	.LASF21:
 1302 0040 70657269 		.ascii	"period\000"
 1302      6F6400
 1303              	.LASF19:
 1304 0047 50574D5F 		.ascii	"PWM_SPO2_WritePeriod\000"
 1304      53504F32 
 1304      5F577269 
 1304      74655065 
 1304      72696F64 
 1305              	.LASF31:
 1306 005c 50574D5F 		.ascii	"PWM_SPO2_ClearFIFO\000"
 1306      53504F32 
 1306      5F436C65 
 1306      61724649 
 1306      464F00
 1307              	.LASF36:
 1308 006f 50574D5F 		.ascii	"PWM_SPO2_Start\000"
 1308      53504F32 
 1308      5F537461 
 1308      727400
 1309              	.LASF18:
 1310 007e 50574D5F 		.ascii	"PWM_SPO2_WriteCounter\000"
 1310      53504F32 
 1310      5F577269 
 1310      7465436F 
 1310      756E7465 
 1311              	.LASF9:
 1312 0094 666C6F61 		.ascii	"float\000"
 1312      7400
 1313              	.LASF24:
 1314 009a 50574D5F 		.ascii	"PWM_SPO2_SetInterruptMode\000"
 1314      53504F32 
 1314      5F536574 
 1314      496E7465 
 1314      72727570 
 1315              	.LASF1:
 1316 00b4 756E7369 		.ascii	"unsigned char\000"
 1316      676E6564 
 1316      20636861 
 1316      7200
 1317              	.LASF41:
 1318 00c2 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1318      43313120 
 1318      352E342E 
 1318      31203230 
 1318      31363036 
 1319 00f5 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1319      20726576 
 1319      6973696F 
 1319      6E203233 
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 41


 1319      37373135 
 1320 0128 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1320      66756E63 
 1320      74696F6E 
 1320      2D736563 
 1320      74696F6E 
 1321              	.LASF13:
 1322 0150 72656738 		.ascii	"reg8\000"
 1322      00
 1323              	.LASF32:
 1324 0155 50574D5F 		.ascii	"PWM_SPO2_Init\000"
 1324      53504F32 
 1324      5F496E69 
 1324      7400
 1325              	.LASF42:
 1326 0163 47656E65 		.ascii	"Generated_Source\\PSoC5\\PWM_SPO2.c\000"
 1326      72617465 
 1326      645F536F 
 1326      75726365 
 1326      5C50536F 
 1327              	.LASF5:
 1328 0185 6C6F6E67 		.ascii	"long unsigned int\000"
 1328      20756E73 
 1328      69676E65 
 1328      6420696E 
 1328      7400
 1329              	.LASF12:
 1330 0197 75696E74 		.ascii	"uint8\000"
 1330      3800
 1331              	.LASF29:
 1332 019d 636F6E74 		.ascii	"control\000"
 1332      726F6C00 
 1333              	.LASF20:
 1334 01a5 636F756E 		.ascii	"counter\000"
 1334      74657200 
 1335              	.LASF10:
 1336 01ad 646F7562 		.ascii	"double\000"
 1336      6C6500
 1337              	.LASF28:
 1338 01b4 50574D5F 		.ascii	"PWM_SPO2_WriteControlRegister\000"
 1338      53504F32 
 1338      5F577269 
 1338      7465436F 
 1338      6E74726F 
 1339              	.LASF39:
 1340 01d2 4379456E 		.ascii	"CyEnterCriticalSection\000"
 1340      74657243 
 1340      72697469 
 1340      63616C53 
 1340      65637469 
 1341              	.LASF43:
 1342 01e9 433A5C55 		.ascii	"C:\\Users\\Chronikle\\Documents\\GitHub\\BodyAnalyz"
 1342      73657273 
 1342      5C436872 
 1342      6F6E696B 
 1342      6C655C44 
 1343 0217 65725C65 		.ascii	"er\\esw_uCOS3_cykit.cydsn\000"
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 42


 1343      73775F75 
 1343      434F5333 
 1343      5F63796B 
 1343      69742E63 
 1344              	.LASF8:
 1345 0230 756E7369 		.ascii	"unsigned int\000"
 1345      676E6564 
 1345      20696E74 
 1345      00
 1346              	.LASF44:
 1347 023d 50574D5F 		.ascii	"PWM_SPO2_ReadControlRegister\000"
 1347      53504F32 
 1347      5F526561 
 1347      64436F6E 
 1347      74726F6C 
 1348              	.LASF7:
 1349 025a 6C6F6E67 		.ascii	"long long unsigned int\000"
 1349      206C6F6E 
 1349      6720756E 
 1349      7369676E 
 1349      65642069 
 1350              	.LASF37:
 1351 0271 50574D5F 		.ascii	"PWM_SPO2_ReadCompare\000"
 1351      53504F32 
 1351      5F526561 
 1351      64436F6D 
 1351      70617265 
 1352              	.LASF16:
 1353 0286 50574D5F 		.ascii	"PWM_SPO2_Enable\000"
 1353      53504F32 
 1353      5F456E61 
 1353      626C6500 
 1354              	.LASF33:
 1355 0296 72657375 		.ascii	"result\000"
 1355      6C7400
 1356              	.LASF30:
 1357 029d 50574D5F 		.ascii	"PWM_SPO2_ReadCapture\000"
 1357      53504F32 
 1357      5F526561 
 1357      64436170 
 1357      74757265 
 1358              	.LASF34:
 1359 02b2 6374726C 		.ascii	"ctrl\000"
 1359      00
 1360              	.LASF15:
 1361 02b7 73697A65 		.ascii	"sizetype\000"
 1361      74797065 
 1361      00
 1362              	.LASF3:
 1363 02c0 73686F72 		.ascii	"short unsigned int\000"
 1363      7420756E 
 1363      7369676E 
 1363      65642069 
 1363      6E7400
 1364              	.LASF6:
 1365 02d3 6C6F6E67 		.ascii	"long long int\000"
 1365      206C6F6E 
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 43


 1365      6720696E 
 1365      7400
 1366              	.LASF25:
 1367 02e1 696E7465 		.ascii	"interruptMode\000"
 1367      72727570 
 1367      744D6F64 
 1367      6500
 1368              	.LASF2:
 1369 02ef 73686F72 		.ascii	"short int\000"
 1369      7420696E 
 1369      7400
 1370              	.LASF45:
 1371 02f9 50574D5F 		.ascii	"PWM_SPO2_initVar\000"
 1371      53504F32 
 1371      5F696E69 
 1371      74566172 
 1371      00
 1372              	.LASF40:
 1373 030a 43794578 		.ascii	"CyExitCriticalSection\000"
 1373      69744372 
 1373      69746963 
 1373      616C5365 
 1373      6374696F 
 1374              	.LASF4:
 1375 0320 6C6F6E67 		.ascii	"long int\000"
 1375      20696E74 
 1375      00
 1376              	.LASF22:
 1377 0329 50574D5F 		.ascii	"PWM_SPO2_WriteCompare\000"
 1377      53504F32 
 1377      5F577269 
 1377      7465436F 
 1377      6D706172 
 1378              	.LASF14:
 1379 033f 6C6F6E67 		.ascii	"long double\000"
 1379      20646F75 
 1379      626C6500 
 1380              	.LASF0:
 1381 034b 7369676E 		.ascii	"signed char\000"
 1381      65642063 
 1381      68617200 
 1382              	.LASF23:
 1383 0357 636F6D70 		.ascii	"compare\000"
 1383      61726500 
 1384              	.LASF27:
 1385 035f 50574D5F 		.ascii	"PWM_SPO2_ReadStatusRegister\000"
 1385      53504F32 
 1385      5F526561 
 1385      64537461 
 1385      74757352 
 1386              	.LASF38:
 1387 037b 50574D5F 		.ascii	"PWM_SPO2_ReadPeriod\000"
 1387      53504F32 
 1387      5F526561 
 1387      64506572 
 1387      696F6400 
 1388              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
ARM GAS  C:\Users\CHRONI~1\AppData\Local\Temp\ccUTa92T.s 			page 44


